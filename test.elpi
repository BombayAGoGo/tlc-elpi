% Il tipo dei tipi del lambda-calcolo tipato semplice
kind typ type.
type arr typ -> typ -> typ.

% I termini del lambda-calcolo tipato semplice alla Church
kind term type.
type app term -> term -> term.
type lam typ -> (term -> term) -> term.

% esempio: lambda x:nat. x x
% diventa  lam nat (x \ app x x)

type of term -> typ -> o.

% un programma Gamma è una lista di clausole
% una clausola è una formula della logica intuizionista di ordine superiore
% ristretta alla sintassi
%   P ::= Q => P | P :- Q | P,P | true | pi X \ P | exists x \ P
%       | p t1 ... tn | X t1 ... tn
%   Q ::= P => Q | Q :- P | Q,Q | Q;Q | true | false | pi x \ Q | exists X \ Q
%       | p t1 ... tn | X t1 .. tn

mode (of i o).
of (uvar as X) B :- declare_constraint (of X B) [X].
of (app M N) B :- of M (arr A B), of N A.
of (lam A F) (arr A B) :- pi x \ of x A => of (F x) B.

main :-
 of X (arr (arr a b) (arr (arr b c) (arr a c))),
 X = lam Z F,
 (pi x \
   F x = lam Z' (F' x),
   pi y \
     F' x y = lam Z'' (F'' x y),
     pi z \
       F'' x y z = app y (A x y z),
       A x y z = app x (B x y z),
       B x y z = z).

tactic intro (lam Z F) Vars K :- pi x \ K [([x|Vars],(F x))].
tactic (app 2) (app H G) Vars K :- Vars = [_,H|_], K [(Vars,G)].
tactic (app 3) (app H G) Vars K :- Vars = [_,_,H|_], K [(Vars,G)].
tactic (var 1) H Vars K :- Vars = [H|_], K [].

interactive Script' :-
    of X (arr (arr a b) (arr (arr b c) (arr a c))),
    Script = [],
    loop [([],X)] Script Script'.

% As of now: if I pass a script of length n I can input n-1 commands before a failure.
% Moreover the script won't get evaluated
loop [] [] [].
loop [(Vars,X)|TL] [] [T|Script'] :-
    print_constraints,
    print, print Vars "|-" X,
    read T,
    tactic T TE Vars (Goals \ sigma TL' \
        X = TE,
        append Goals TL TL',
        loop TL' [] Script').
loop [(Vars,X)|TL] [T|Script] [T|Script'] :-
    tactic T TE Vars (Goals \ sigma TL' \
        X = TE,
        append Goals TL TL',
        loop TL' Script Script').

append [] L L.
append [X|XS] L [X|YS] :- append XS L YS.
