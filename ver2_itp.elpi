accumulate utils.
accumulate stlc/theory.

% tmp start
prove Term :-
    isa PTerm (arr (arr a (arr b c)) (arr (prod a b) c)) Term,
    %isa PTerm (arr bool nat) Term,
    refine PTerm [].

% ----------------------- %
% ---- ITP PROCEDURE ---- %
% ----------------------- %

mode (process_input i i i).
% NOTE: this could be used to add new ways
% to handle input, for instance getting
% manual input form the user and so on
process_input (tac Name) X Vars :-
    tac Name (Vars, X) PTerm,
    X = PTerm,
    refine PTerm Vars.

% Core of itp procedure
% IDEA: you want to build a term X of type T
% to do this you have to fill all the holes in
% the term, to do this you use recursion on the
% partial term. Once all meta-vars are filled,
% the whole term will be returned.
mode (refine i i).
%refine A B :- print (refine A B), fail.
refine (uvar as X) Vars :- !,
    print_info X Vars,
    read T,
    process_input T X Vars.

refine (app M N) Vars :- refine M Vars, refine N Vars.
refine (lam N T F) Vars :- pi x\ refine (F x) [(x, N)|Vars].

refine (pair M N) Vars :- refine M Vars, refine N Vars.
refine (fst P) Vars :- refine P Vars.
refine (snd P) Vars :- refine P Vars.

refine (case N1 N2 P F G) Vars :-
    refine G Vars,
    pi x\ refine (F x) [(x, N1)|Vars],
    pi x\ refine (G x) [(x, N2)|Vars].
refine (inl T2 X) Vars :- refine X Vars.
refine (inr T1 X) Vars :- refine X Vars.

refine (abort T X) Vars :- refine X Vars.

refine X Vars :- name X.

% ----------------- %
% ---- TACTICS ---- %
% ----------------- %

mode (tac i i o).

% ---- PRIMITIVE ---- %

% ---- IMPL TACTICS

tac (intro N) _ (lam N T F).
tac app _ (app M N).

tac (var N) (Vars, _) H :-
    get_named N Vars H.

% ---- AND TACTICS

tac andEL _ (fst X).
tac andER _ (snd X).
tac andI _ (pair A B).

% ---- OR TACTICS

tac orIL _ (inl T2 X).
tac orIR _ (inr T1 X).

tac (orE N1 N2) _ (case N1 N2 M F G).

% ---- BOT TACTICS

tac botE _ (abort T X).

% ---- NON PRIMITIVE ---- %

tac (mapp N) (Vars, X) PTerm :-
    get_named N Vars H,
    get_type X T,
    get_ctx X (dots H T PTerm).

mode (dots i i o).
%dots A B C :- print (dots A B C), fail.
dots X T X :- isa X T _.
dots Lam T PTerm :-
    isa Lam (arr _ _), % stlc specific, should move
    dots (app Lam Arg) T PTerm.

% ------------- %
% ---- AUX ---- %
% ------------- %

print_info X Vars :-
    print_constraints,
    print, print Vars "|-" X.

% Given a term, get its ariety
mode (get_ariety i o).
get_ariety (arr T _S) N :- get_ariety_aux T N.
get_ariety T 0. % :- print "Warning: T must be arr," T "given".

mode (get_ariety_aux i o).
get_ariety_aux (arr T S) N :-
    get_ariety_aux T X,
    get_ariety_aux S Y,
    N is X + Y + 1.
get_ariety_aux T 0.

