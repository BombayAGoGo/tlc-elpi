accumulate theory.

% ---- TESTS ---- %


steps_app X :-
    steps (app (app (lam (arr nat nat) x \ x) (lam nat y \ y)) a) X.
steps_fst X :-
    steps (fst (pair a b)) X.
steps_snd X :-
    steps (snd (pair a b)) X.
steps_caseL X :-
    steps (case (inl T2 x) (u \ u) (v \ v)) X.
steps_caseR X :-
    steps (case (inr T1 y) (u \ u) (v \ v)) X.

test_all_steps L :-
    steps_app X1,
    steps_fst X2,
    steps_snd X3,
    steps_caseL X4,
    steps_caseR X5,
    L = [X1, X2, X3, X4, X5],
    print "5/5 test passed".


conv_app X Y :-
    conv (app (lam nat x \ x) X) (app Y a).  
conv_lam X :-
    conv (lam nat x \ (pair x x)) (lam nat x \ (X x)).
conv_pair X :-
    conv (pair (app (lam nat x \ x) 0) X) (pair 0 b).
conv_fst X :-
    conv (fst (pair X b)) a. 
conv_snd X :-
    conv (snd (pair a X)) b. 
conv_inl X :-
    conv (inl T2 (just x)) (inl T2 X).
conv_inr X :-
    conv (inr T1 X) (inr T1 none).
conv_case X :-
    conv (case (inl T2 X) (y \ y) (z \ (pair z z))) x.
conv_fstcase X :-
    step (snd (case (inr T1 x) (u \ pair a b) (v \ pair c d))) X.

test_all_conv L :-
    print "conv_app test",
    conv_app X1a X1b, X1 = [X1a, X1b],
    print,

    print "conv_lam test",
    conv_lam X2,
    print,

    print "conv_pair test",
    conv_pair X3,
    print,

    print "conv_fst test",
    conv_fst X4,
    print,

    print "conv_snd test",
    conv_snd X5,
    print,

    print "conv_inl test",
    conv_inl X6,
    print,

    print "conv_inr test",
    conv_inr X7,
    print,

    print "conv_case test",
    conv_case X8,
    print,

    print "conv_fstcase test",
    conv_fstcase X9,
    print,

    L = [X1, X2, X3, X4, X5, X6, X7, X8, X9],
    print "9/9 test passed".
