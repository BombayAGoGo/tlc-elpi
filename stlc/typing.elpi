% un programma Gamma è una lista di clausole
% una clausola è una formula della logica intuizionista di ordine superiore
% ristretta alla sintassi
%   P ::= Q => P | P :- Q | P,P | true | pi X \ P | exists x \ P
%       | p t1 ... tn | X t1 ... tn
%   Q ::= P => Q | Q :- P | Q,Q | Q;Q | true | false | pi x \ Q | exists X \ Q
%       | p t1 ... tn | X t1 .. tn

%type of term -> typ -> o.
%mode (of i o o).
%of (uvar as X) T :- declare_constraint (of X T) [X].

% NOTE: of and isa basic behaviour is described in commons/typing.elpi

% ------------------------ %
% ---- TYPE INFERENCE ---- %
% ------------------------ %

% arrow
of (app Lam N) S (app Lam' N') :- isa Lam (arr T S) Lam', isa N T N'.
of (lam T F) (arr T S) (lam T F') :- pi x \ isa x T x => isa (F x) S (F' x).

% product
of (pair Fst Snd) (prod T1 T2) (pair Fst' Snd') :- isa Fst T1 Fst', isa Snd T2 Snd'.
of (fst Pair) T (fst Pair') :- isa Pair (prod T S) Pair'.
of (snd Pair) S (snd Pair') :- isa Pair (prod T S) Pair'.

% sum
of (inl T2 InL) (sum T1 T2) (inl T2 InL') :- isa InL T1 InL'.
of (inr T1 InR) (sum T1 T2) (inr T1 InR') :- isa InR T2 InR'.
of (case M F G) T (case M' F' G') :-
    isa M (sum T1 T2) M',
    (pi u \ isa u T1 u => isa (F u) T (F' u)),
    (pi v \ isa v T2 v => isa (G v) T (G' v)).

% top e bottom
of singleton unit singleton.
of (abort T X) T (abort T X') :- isa X void X'.

% elaborator terms
% named lambda to unnamed lambda
isa (lam N T F) A O :- isa (lam T F) A O.
