% Various STLC term processing predicates used by the elaborator

% rec_term is called by a tactic when it needs to perform the recovery of metas
mode (rec_term i i i).

%rec_term A B C :- print (rec_term A B C), fail.

rec_term (uvar as Y) Vars K :- lookdown Y X, K [(Vars, X)].

rec_term (lam N T F) Vars K :- pi x\ rec_term (F x) [(x, N)|Vars] K.
rec_term (app M N) Vars K :- rec_term M Vars K, rec_term N Vars K.

rec_term X Vars K :-
    name X, % dovrei controllare che X sia in Vars?
    K [].


% Given a user-term, return a system-term + definitions for meta rewriting
% INV: there can only be ONE dmeta predicate for (? N)
mode (process_term i o).
process_term A B :- print (process_term A B), fail.

process_term (arr M N) (arr M' N') :- !, process_term M M', process_term N N'.

process_term (app M N) (app M' N') :- !, process_term M M', process_term N N'.
process_term (lam T F) (lam T F') :- !, pi x\ process_term (F x) (F' x).
process_term (lam N T F) (lam N T F') :- !, process_term (lam T F) (lam T F').

process_term (? N) X :- !, declare_constraint (read-mlink (? N) X) [X].
process_term (? N) M :- !, declare_constraint (mlink (? N) M) [M].

process_term T T.

%process_term (inl T2 L) (inl T2 L') :- process_term L L'.
%process_term (inr T1 R) (inr T1 R') :- process_term R R'.
%process_term (case S Fl Fr) (case S' Fl' Fr') :-
%    process_term S S', pi x\ (process_term (Fl x) (Fl' x), process_term (Fr x) (Fr' x)).

constraint read-mlink mlink {
    rule (E1: Ctx1 ?- mlink N (uvar X L as M))
    \ (E2: Ctx2 read-mlink N Y)
    | (print "match")
    <=> (E2: Ctx2 ?- Y = M).
}
