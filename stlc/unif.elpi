% -------------------------- %
% ---- SUBSTITION RULES ---- %
% -------------------------- %

% XXX: copy and conv rules are VERY similar
% but copy doesn't have i i mode i.e. it lets
% you instantiate... is there a better way
% to do this?

% TODO: try to fix cases where copy predicates
% are not in pattern fragment

% ---- Copy ---- %

%copy A B :- print (copy A B), fail. % Debug

copy (lam _ F) (lam _ F') :- pi x\ copy (F x) (F' x).
copy (app A1 B1) (app A2 B2) :- copy A1 A2, copy B1 B2.

copy (pair M1 N1) (pair M2 N2) :- copy M1 M2, copy N1 N2.

copy (fst P1) (fst P2) :- copy P1 P2.
copy (snd P1) (snd P2) :- copy P1 P2.

copy (inl _ S1) (inl _ S2) :- copy S1 S2.
copy (inr _ S1) (inr _ S2) :- copy S1 S2.

copy (case M1 F1 G1) (case M2 F2 G2) :-
    copy M1 M2,
    pi x\ copy (F1 x) (F2 x),
    pi x\ copy (G1 x) (G2 x).

copy zero zero.
copy (succ N1) (succ N2) :- copy N1 N2.
copy (natrec N1 ZE1 F1) (natrec N2 ZE2 F2) :-
    copy N1 N2,
    copy ZE1 ZE2,
    pi x y\ copy (F1 x y) (F2 x y).

copy tt tt.
copy ff ff.
copy (ite C1 T1 E1) (ite C2 T2 E2) :-
    copy C1 C2,
    copy T1 T2,
    copy E1 E2.

copy X X.

mode (rcopy i i i i).
%rcopy A B C D :- print (rcopy A B C D), fail.
rcopy V X [] Clause :- copy V X => Clause.
rcopy V (uvar as X) [(uvar K L)|TS] Clause :- !, 
    pi x\ rcopy x K L (rcopy V (X x) TS Clause).
rcopy V (uvar as X) [T|TS] Clause :- 
    pi x\ copy x T => rcopy V (X x) TS Clause.

mode (subst i i i).
%subst M T S :- print (subst M T S), fail. % Debug
subst M [] S :- print "----" M S, copy M S.
subst (uvar as M) [(uvar K L)|TS] S :- !,
    pi x\ rcopy x K L (subst (M x) TS S).
subst (uvar as M) [T|TS] S :-
    pi x\ copy x T => subst (M x) TS S.


