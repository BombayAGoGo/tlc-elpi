% TODO:
% - gestione migliore casi flex-flex
% - pruning/reduction/...?
% - portare tutto al calcolo dipendente

% ------------------------ %
% ---- STEP EXTENSION ---- %
% ------------------------ %

% TODO: rimuovere queste cose, non dovrebbero mai capitare ma servono per
%       beccare errori
mode (step i o).
mode (steps i o).

step (app (uvar as M) N) (app M N) :- print "step on app uvar", halt.
steps (app (uvar as M) N) (app M N) :- print "steps on app uvar", halt.

step (app (lam T (uvar as F)) M) (app (lam T F) M) :- print "step on app lam uvar", halt.
steps (app (lam T (uvar as F)) M) (app (lam T F) M) :- print "steps on app lam uvar", halt.

step (case Sum (uvar as U) V) (case Sum U V) :- print "step on case with uvar left", halt.
step (case Sum U (uvar as V)) (case Sum U V) :- print "step on case with uvar right", halt.
steps (case Sum (uvar as U) V) (case Sum U V) :- print "steps on case with uvar left", halt.
steps (case Sum U (uvar as V)) (case Sum U V) :- print "steps on case with uvar right", halt.

% ------------------------ %
% ---- CONV EXTENSION ---- %
% ------------------------ %

mode (is_stuck i).
is_stuck uvar.
is_stuck (app M _) :- is_stuck M.
is_stuck _ :- fail.

mode (conv i i).
conv X Y :- print (conv X Y), fail.
conv X Y :- is_stuck X, is_stuck Y, !, conv_constraint X Y X Y.
conv X Y :- (is_stuck X, !; is_stuck Y), !, unify X [] Y [].

mode (conv_constraint i i).
conv_constraint (app M N) S A B :- conv_constraint M S A B.
conv_constraint T (app M N) A B :- conv_constraint T M A B. 
conv_constraint (uvar as X) (uvar as Y) A B :- !, declare_constraint (conv A B) [X, Y].

% if F is closed we can perform reductions, otherwise stop all reductions
conv (app (lam A F) S) T :- pi x\ not (is_closed (F x)), !, unify (app (lam A F) S) [] T [].
conv T (app (lam A F) S) :- pi x\ not (is_closed (F x)), !, unify T [] (app (lam A F) S) [].

conv (case (inl T2 L) Fl Fr) T :-
    pi x\ not (is_closed (Fl x)), !, unify (case (inl T2 L) Fl Fr) [] T [].
conv (case (inr T1 R) Fl Fr) T :-
    pi x\ not (is_closed (Fr x)), !, unify (case (inr T1 R) Fl Fr) [] T [].
conv T (case (inl T2 L) Fl Fr) :-
    pi x\ not (is_closed (Fl x)), !, unify T [] (case (inl T2 L) Fl Fr) [].
conv (case (inr T1 R) Fl Fr) T :-
    pi x\ not (is_closed (Fr x)), !, unify T [] (case (inr T1 R) Fl Fr) [].

type is_closed term -> o.
mode (is_closed i).
is_closed uvar :- !, fail.
is_closed (app M N) :- !, is_closed M, is_closed N.
is_closed (lam T F) :- !, pi x\ is_closed (F x).
is_closed (pair M N) :- !, is_closed M, is_closed N.
is_closed (fst P) :- !, is_closed P.
is_closed (snd P) :- !, is_closed P.
is_closed (inl T2 L) :- !, is_closed L.
is_closed (inr T1 R) :- !, is_closed R.
is_closed (case S Fl Fr) :- !,
    is_closed S, pi x\ is_closed (Fl x), pi x\ is_closed (Fr x).
is_closed (succ N) :- !, is_closed N.
is_closed M.

% --------------------- %
% ---- UNIFICATION ---- %
% --------------------- %

mode (unify i i i i).
unify A B C D :- print (unify A B C D), fail.

% delay flex-flex
%unify (uvar as X) L (uvar as Y) L' :- !, declare_constraint (unify X L Y L') [X, Y].
unify (uvar as X) [] (uvar as Y) [] :- !, declare_constraint (read-copies) [], declare_constraint (unify X [] Y []) [X, Y].

% catch β-redex
unify (app (lam A F) X) L T L' :- !,
    pi x\ (of x A x, copy x X) => unify (F x) L T L'.
unify T L (app (lam A F) X) L' :- !,
    pi x\ (of x A x, copy x X) => unify T L (F x) L'.

% β-redex through copy
unify (app Lam X) L T L' :-
    name Lam, get_copy Lam Lam', Lam' = lam A F,
    pi x\ (of x A x, copy x X, forbid Lam) => unift (F x) L T L'.
unify T L (app Lam X) L' :-
    name Lam, get_copy Lam Lam', Lam' = lam A F,
    pi x\ (of x A x, copy x X, forbid Lam) => unift T L (F x) L'.

% catch σ-redex
unify (case (inl T2 L) Fl Fr) L T L' :- !,
    of L T1 _, pi x\ (of x T1 x, copy x L) => unify (Fl x) L T L'.
unify (case (inr T1 R) Fl Fr) L T L' :- !,
    of R T2 _, pi x\ (of x T2 x, copy x R) => unify (Fr x) L T L'.
unify T L (case (inl T2 L) Fl Fr) L' :- !,
    of L T1 _, pi x\ (of x T1 x, copy x L) => unify T L (Fl x) L'.
unify T L (case (inr T1 R) Fl Fr) L' :- !,
    of R T2 _, pi x\ (of x T2 x, copy x R) => unify T L (Fr x) L'.

% σ-redex through copy
unify (case V Fl Fr) L T L' :-
    name V, get_copy V X, X = inl T2 L,
    of L T1 _, pi x\ (of x T1 x, copy x L, forbid V) => unify (Fl x) L T L'.
unify (case V Fl Fr) L T L' :-
    name V, get_copy V X, X = inr T1 R,
    of R T2 _, pi x\ (of x T2 x, copy x R, forbid V) => unify (Fr x) L T L'.
unify T L (case V Fl Fr) L' :-
    name V, get_copy V X, X = inl T2 L,
    of L T1 _, pi x\ (of x T1 x, copy x L, forbid V) => unify T L (Fl x) L'.
unify T L (case V Fl Fr) L' :-
    name V, get_copy V X, X = inr T1 R,
    of R T2 _, pi x\ (of x T2 x, copy x R, forbid V) => unify T L (Fr x) L'.

% unwind app
unify (app X Y) L T L' :- !,
    append [Y] L LY,
    unify X LY T L'.
unify T L' (app X Y) L :- !,
    append [Y] L LY,
    unify T L' X LY.

mode (rewind_app i i o).
rewind_app A [] A.
rewind_app T [L|Ls] A :-
    rewind_app (app T L) Ls A.

% Meta with args is a lambda
unify (uvar as X) [L|Ls] T L' :- !, 
    print "inst",
    isa L LTy _,
    X = lam LTy F,
    pi x\ (of x LTy x, copy x L) => unify (F x) Ls T L'.

%unify T L' (uvar as X) [L|Ls] :- !, 
%    print "inst",
%    isa L LTy _,
%    X = lam LTy F,
%    pi x\ (of x LTy x, copy x L) => unify T L' (F x) Ls.

% ---- TYPE UNIFICATION ---- %

% in stlc we just copy types
unify (uvar as X) [] nat        [] :- !, X = nat.
unify (uvar as X) [] (arr M N)  [] :- !, X = arr M N.
unify (uvar as X) [] (prod M N) [] :- !, X = prod M N.
unify (uvar as X) [] (sum M N)  [] :- !, X = sum M N.

% ---- TERM UNIFICATION ---- %

% PROJECTION
unify (uvar _ Vs as X) [] Term Arg :- print "proj" X Term Arg, rewind_app Term Arg App, try_projection X Vs App.

mode (try_projection i i i).
try_projection _ [] _ :- fail.
try_projection X [V|Vs] App :-
    (not (forbid V), get_copy V T', use_var V T' App Asgn, X = Asgn); try_projection X Vs App.

mode (get_copy i o).
get_copy V X :- declare_constraint (copy V X) [X].

mode (use_var i i i o).
use_var A B C D :- print (use_var A B C D), fail.
use_var V (pair A _) S O :- use_var (fst V) A S O.
use_var V (pair _ B) S O :- use_var (snd V) B S O.
use_var V (inl T2 L) S O :-
    of L T1 _,
    pi x\ (of x T1 x, copy x L, forbid V) => use_var (case V Fl Fr) (Fl x) S O.
use_var V (inr T2 R) S O :-
    of R T2 _,
    pi x\ (of x T2 x, copy x R, forbid V) => use_var (case V Fl Fr) (Fr x) S O.
use_var V T S V :- conv T S.

% MIMIC
% Arr
unify (uvar as X) [] T [A|As] :-
    print "app" X T [A|As],
    X = app M N,
    append Body [Tail] [A|As],
    unify M [] T Body,
    unify N [] Tail [].
unify (uvar as X) [] (lam T F) [] :-
    print "lam",
    X = lam T G, pi x\ (of x T x, copy x x) => unify (G x) [] (F x) [].

% Prod
unify (uvar as X) [] (pair M N) [] :-
    print "pair",
    X = pair P Q, unify P [] M [], unify Q [] N [].
unify (uvar as X) [] (fst P) [] :-
    print "fst",
    X = fst Q, unify Q [] P [].
unify (uvar as X) [] (snd P) [] :-
    print "snd",
    X = snd Q, unify Q [] P [].

% Sum
unify (uvar as X) [] (inl T2 L) [] :-
    print "inl",
    X = inl T2 L', unify L' [] L [].
unify (uvar as X) [] (inr T1 R) [] :-
    print "inr",
    X = inr T1 R', unify R' [] R [].
unify (uvar as X) [] (case S Fl Fr) [] :-
    print "case",
    of S (sum T1 T2) _,
    X = case S' Fl' Fr',
    unify S' [] S [],
    pi x\ (of x T1 x, copy x x) => unify (Fl' x) [] (Fl x) [],
    pi x\ (of x T2 x, copy x x) => unify (Fr' x) [] (Fr x) [].

% Nat
unify (uvar as X) [] (succ Y) [] :- !,
    print "succ",
    X = succ N, unify N [] Y [].
% Const
unify (uvar as X) [] T [] :- !, print "const" X T, not (name T), X = T.

% Simmetric case
unify T L' (uvar as X) L :- !, unify X L T L'.


constraint read-copies copy {
    rule (Ctx ?- read-copies)
    | (print "copies: " Ctx).

    rule (E: Ctx ?- copy V R)
    | (climb_telescope Ctx V V')
    <=> (E: Ctx ?- R = V').
}

mode (climb_telescope i i o).
%climb_telescope A B C :- print (climb_telescope A B C), fail.
climb_telescope [] V V.
climb_telescope [copy X Y|Ctx] X Y :- not (name Y).
climb_telescope [copy X Y|Ctx] X R :- !, climb_telescope Ctx Y R.
climb_telescope [_|Ctx] V R :- !, climb_telescope Ctx V R.
