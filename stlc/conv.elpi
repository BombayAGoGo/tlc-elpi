% ---------------------------- %
% ---- ONE STEP REDUCTION ---- %
% ---------------------------- %

mode (step i o).
step X Y :- print (step X Y), fail.

% App
step (app M N) R :- steps M (lam T F), subst F [N] R.

% Pairs
step (fst Pair) M :- steps Pair (pair M N).
step (snd Pair) N :- steps Pair (pair M N).

% Case
step (case Sum U V) UL :- steps Sum (inl _T2 L), subst U [L] UL.
step (case Sum U V) VR :- steps Sum (inr _T1 R), subst V [R] VR.

% Natrec
step (natrec Z ZE _Fun) ZE :- steps Z zero.
step (natrec S ZE Fun) R :-
    steps S (succ N),
    steps (natrec N ZE Fun) RecRes,
    subst Fun [N, RecRes] R.

% If then else
step (ite Cond Then Else) Then :- steps Cond tt.
step (ite Cond Then Else) Else :- steps Cond ff.

% ------------------- %
% ---- ETA RULES ---- %
% ------------------- %

%conv (lam A F) F' :- pi x\ of x A x => conv (F x) (app F' x).
%conv F' (lam A F) :- pi x\ of x A x => conv (F x) (app F' x).

% ------------------------------ %
% ---- MULTI STEP REDUCTION ---- %
% ------------------------------ %

mode (steps i o).
steps X Y :- print (steps X Y), fail.

% normalization of a list of arguments
%steps [] [].
%steps [M|MS] [M'|MS'] :- steps M M', steps MS MS'.

steps M N :- step M M', !, steps M' N.
steps M M.

% ------------------------- %
% ---- TYPE CONVERSION ---- %
% ------------------------- %

mode (conv i i).

conv (arr A B) (arr C D) :- !, conv A C, conv B D.
conv (prod A B) (prod C D) :- !, conv A C, conv B D.
conv (sum A B) (sum C D) :- !, conv A C, conv B D.
conv (void A) (void B) :- !, conv A B.

% ------------------------- %
% ---- TERM CONVERSION ---- %
% ------------------------- %

% INVARIANT: we assume terms are typed beforehand and that conversion is only
% asked between terms with convertible types.

conv (app M1 N1) (app M2 N2) :- !, conv M1 M2, conv N1 N2.
conv (lam T F1) (lam T F2) :- !, pi x\ of x T x => conv (F1 x) (F2 x).
conv (lam _ T F1) (lam _ T F2) :- !, conv (lam T F1) (lam T F2).

conv (pair M1 N1) (pair M2 N2) :- !, conv M1 M2, conv N1 N2.

conv (fst P1) (fst P2) :- !, conv P1 P2.
conv (snd P1) (snd P2) :- !, conv P1 P2.

conv (inl _ S1) (inl _ S2) :- !, conv S1 S2.
conv (inr _ S1) (inr _ S2) :- !, conv S1 S2.

conv (case M1 F1 G1) (case M2 F2 G2) :- !,
    conv M1 M2,
    pi x\ conv (F1 x) (F2 x),
    pi x\ conv (G1 x) (G2 x).

conv (succ N1) (succ N2) :- !, conv N1 N2.
conv (natrec N1 ZE1 F1) (natrec N2 ZE2 F2) :- !,
    conv N1 N2,
    conv ZE1 ZE2,
    pi x y\ conv (F1 x y) (F2 x y).

conv (ite C1 T1 E1) (ite C2 T2 E2) :- !,
    conv C1 C2,
    conv T1 T2,
    conv E1 E2.

conv M M :- !.
conv M N :- step M M', !, conv M' N. % at least one-step reduction
conv M N :- step N N', !, conv M N'.
