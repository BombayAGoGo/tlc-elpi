% -------------------- %
% ---- BETA RULES ---- %
% -------------------- %

mode (step i o).
step X Y :- print (step X Y), fail.

% App
step (app M N) R :- steps M (lam T F), R = F N.

% Pairs
step (fst Pair) M :- steps Pair (pair M N).
step (snd Pair) N :- steps Pair (pair M N).

% Case
step (case Sum U V) (U R) :- steps Sum (inl _T2 R).
step (case Sum U V) (V S) :- steps Sum (inr _T1 S).


% ------------------- %
% ---- ETA RULES ---- %
% ------------------- %

%mode (eta_step i o).
%eta_step (of M (arr A B)) (lam A (u \ M u)).
%eta_step (of M (prod A B)) (pair (fst M) (snd M)).
%eta_step (of M (sum A B)) (case M (u \ inl B u) (v \ inr A w)).
%eta_step (of M unit) singleton.
%eta_step (of M void) (abort void M).


mode (steps i o).
steps X Y :- print (steps X Y), fail.
steps M N :- step M M', !, steps M' N.
steps M M.

mode (steps_debug i o).
steps_debug X Y :- print (steps_debug X Y), fail.
steps_debug M N :- step M M', !, print "Input something to go on", read Something, steps_debug M' N.
steps_debug M M.


% ---------------- %
% ---- NUCLEO ---- %
% ---------------- %

% rules for term equivalence

%mode (conv i i).
%conv M N :- steps M M', steps N N', M' = N'.

mode (conv i i).
conv X Y :- print (conv X Y), fail.

conv (succ M) (succ M') :- conv M M'.
conv (prec M) (prec M') :- conv M M'.
conv (plus M N) (plus X Y) :- steps (plus M N) S1, steps (plus X Y) S2, conv S1 S2.

conv (app M1 N1) (app M2 N2) :- conv M1 M2, conv N1 N2.
conv (lam _ F1) (lam _ F2) :- pi x \ conv (F1 x) (F2 x).

conv (pair M1 N1) (pair M2 N2) :- conv M1 M2, conv N1 N2.

conv (fst P1) (fst P2) :- conv P1 P2.
conv (snd P1) (snd P2) :- conv P1 P2.

conv (inl _ S1) (inl _ S2) :- conv S1 S2.
conv (inr _ S1) (inr _ S2) :- conv S1 S2.

conv (case M1 F1 G1) (case M2 F2 G2) :-
    conv M1 M2,
    pi x\ conv (F1 x) (F2 x),
    pi x\ conv (G1 x) (G2 x).

conv M N :- M = N. % i i => non vuole istanziare
conv M N :- step M M', !, conv M' N.
conv M N :- step N N', !, conv M N'.
