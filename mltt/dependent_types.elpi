kind typ type.
type nat typ.
type product typ -> (term -> typ) -> typ.


kind term type.
type lam typ -> (term -> term) -> term.
type app term -> term -> term.
type var typ -> term -> term.

type zero term.
type succ term -> term.
type plus term -> term -> term.


type of term -> typ -> o.
mode (of i o).
of (uvar as X) T :- declare_constraint (of X T) [X].
of (lam A M) (product A B) :- pi x \ of x A => of (M x) (B x).
of (app M N) (B N) :-
    of M (product A B),
    of N A.
of (var T M) T.

% (lam a (x \ x)))

% nat
of zero nat.
of (succ N) nat :- of N nat.
of (plus M N) nat :- of M nat, of N nat.
