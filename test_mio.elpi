% Il tipo dei tipi del lambda-calcolo tipato semplice
kind typ type.
type arr typ -> typ -> typ.

% I termini del lambda-calcolo tipato semplice alla Church
kind term type.
type app term -> term -> term.
type lam typ -> (term -> term) -> term.

% esempio: lambda x:nat. x x
% diventa  lam nat (x \ app x x)

type of term -> typ -> o.

% un programma Gamma è una lista di clausole
% una clausola è una formula della logica intuizionista di ordine superiore
% ristretta alla sintassi
%   P ::= Q => P | P :- Q | P,P | true | pi X \ P | exists x \ P
%       | p t1 ... tn | X t1 ... tn
%   Q ::= P => Q | Q :- P | Q,Q | Q;Q | true | false | pi x \ Q | exists X \ Q
%       | p t1 ... tn | X t1 .. tn

% regole di tipaggio
mode (of i o).
of (uvar as X) B :- declare_constraint (of X B) [X].
of (app M N) B :- of M (arr A B), of N A.
of (lam A F) (arr A B) :- pi x \ of x A => of (F x) B.

% composizione aka \f: A -> B \g: B -> C \x: A . g f x
main :-
 of X (arr (arr a b) (arr (arr b c) (arr a c))),
 X = lam Z F,
 (pi f \
   F f = lam Z' (F' f),
   pi g \
     F' f g = lam Z'' (F'' f g),
     pi x \
       F'' f g x = app g (A f g x),
       A f g x = app f (B f g x),
       B f g x = x).

tactic intro (lam Z F) Vars K :- pi x \ K [([x|Vars],(F x))].
tactic (app 2) (app H G) Vars K :- Vars = [_,H|_], K [(Vars,G)].
tactic (app 3) (app H G) Vars K :- Vars = [_,_,H|_], K [(Vars,G)].
tactic (var 1) H Vars K :- Vars = [H|_], K [].

interactive :-
    of X (arr (arr a b) (arr (arr b c) (arr a c))),
    OutScript = [],
    loop [([],X)] OutScript [].

interactive InScript :-
    of X (arr (arr a b) (arr (arr b c) (arr a c))),
    OutScript = [],
    loop [([],X)] OutScript InScript.

% Non sono sicuro di aver fatto tutto giusto, anzi...
% Idea: se non hai meta variabili da istanziare non fare nulla
loop [] OutScript InScript :-   % not so sure about this
    print "Total script:" OutScript.

% Se hai metavariabili ma non hai uno script di input
loop [(Vars,X)|TL] OutScript [] :-
    print "vuoto",
    print OutScript,
    print_constraints,
    print, print Vars "⊢" X,
    read T,
    tactic T TE Vars (Goals \ sigma TL' \
        X = TE,
        append Goals TL TL',
        loop TL' [T|OutScript] []).

% Se hai metavariabili e hai uno script di input
loop [(Vars,X)|TL] OutScript [T|InScript] :-
    print "pieno",
    tactic T TE Vars (Goals \ sigma TL' \
        X = TE,
        append Goals TL TL',
        loop TL' [T|OutScript] InScript).

append [] L L.
append [X|XS] L [X|YS] :- append XS L YS.
