accumulate itt/lang.
accumulate itt/tactics.
accumulate itt/pp.
accumulate itp.

interactive TestName S :-
    interactive TestName [] S.

interactive TestName TestInput S :-
    TestName Type,
    of X Type,
    loop [([],X)] [] TestInput,
    pp X STerm, pp Type SType,
    S is STerm ^ " :: " ^ SType.


interactive_identity (prod a (x\ a)).

% ---------------------- %
% ---- K combinator ---- %
% ---------------------- %

% [intro, intro, var 2]
interactive_K (prod a (x\ prod b (y\ a))).

% ---------------------- %
% ---- S combinator ---- %
% ---------------------- %

% [intro, intro, intro, app, app 3 1, app 2 1]
interactive_S (prod (prod a (x\ prod b (y\ c))) (_\ prod (prod a (x\ b)) (f\ prod a (x\ c)))).

% axioms of conjunction
% [intro, intro, andI 2 1]
interactive_andIntro (prod a (x\ prod b (y\ sum a (z\ b)))).

% [intro, andEL 1]
interactive_andElimL (prod (sum a (x\ b)) (y\ a)).

% [intro, andER 1]
interactive_andElimR (prod (sum a (x\ b)) (y\ b)).

% [intro, intro, andE, var 1, app, app 4 1, var 2]
interactive_implAnd (prod (prod a (x\ prod b (y\ c))) (_\ prod (sum a (x\ b)) (z\ c))).
