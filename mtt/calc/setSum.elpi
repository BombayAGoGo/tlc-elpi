
%%-- disjoint sum: setSum

type setSum mttType -> mttType -> mttType.
type inl, inr mttType -> mttType -> mttTerm -> mttTerm.
type elim_setSum (mttTerm -> mttType) -> mttTerm -> (mttTerm -> mttTerm) -> (mttTerm -> mttTerm) -> mttTerm.

%%Disjoint Sum Type

ofType (setSum A B) set IE :- ofType A KIND1 IE, ofType B KIND2 IE,
    pts_fun KIND1 KIND2 set.

of (inr A B Bb) (setSum A B) (inr A B Bb') IE
    :- ofType B _ IE
     , ofType A _ IE
     , isa Bb B Bb' IE
     .

of (inl A B Aa) (setSum A B) (inl A B Aa') IE
    :- ofType A _ IE
     , ofType B _ IE
     , isa Aa A Aa' IE
     .

of (elim_setSum C W Cl Cr) C_W (elim_setSum C W' Cl' Cr') IE 
    :- spy (of W (setSum A B) W' IE)
     , spy (ofType (setSum A B) _ IE) 
     , spy (pi z\ locDecl z (setSum A B) => ofType (C z) col IE)
     , spy (pi x\ locDecl x A => 
        spy(isa (Cl x) C_inl (Cl' x) IE),
        pi l\ (locDecl l (setSum A B), copy l (inl A B x)) => conv (C l) C_inl
       ) 
     , spy (pi y\ locDecl y B =>
        isa (Cr y) C_inr (Cr' y) IE,
        pi r\ (locDecl r (setSum A B), copy r (inr A B y)) => conv (C r) C_inr
       ) 
     , pi w\ (locDecl w (setSum A B), copy w W') => conv (C w) C_W
     .

hstep (elim_setSum _C W Cl _Cr) Res
    :- hnf W (inl _A _B Wl)
    ,  subst Cl [Wl] Res
    .
hstep (elim_setSum _C W _Cl Cr) Res
    :- hnf W (inr _A _B Wr)
    ,  subst Cr [Wr] Res
    .

dconv (elim_setSum C W Cl Cr) (elim_setSum C' W' Cl' Cr')
    :- (conv W W')
    ,  (of W AB IE_)
    ,  (pi z \ locDecl z AB => (conv (C z) (C' z) ) )
    ,  (pi z \ locDecl z AB => (conv (Cl z) (Cl' z) ) )
    ,  (pi z \ locDecl z AB => (conv (Cr z) (Cr' z) ) )
    .
