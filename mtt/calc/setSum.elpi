
%%-- disjoint sum: setSum

type setSum mttType -> mttType -> mttType.
type inl, inr mttType -> mttType -> mttTerm -> mttTerm.
type elim_setSum (mttTerm -> mttType) -> mttTerm -> (mttTerm -> mttTerm) -> (mttTerm -> mttTerm) -> mttTerm.

%%Disjoint Sum Type

ofType (setSum A B) set IE :- ofType A KIND1 IE, ofType B KIND2 IE,
    pts_fun KIND1 KIND2 set.

of (inr A B Bb) (setSum A B) (inr A B Bb') IE
    :- ofType B _ IE
     , ofType A _ IE
     , isa Bb B Bb' IE
     .

of (inl A B Aa) (setSum A B) (inl A B Aa') IE
    :- ofType A _ IE
     , ofType B _ IE
     , isa Aa A Aa' IE
     .

of (elim_setSum C W Cl Cr) C_W (elim_setSum C W' Cl' Cr') IE 
    :- spy (of W (setSum A B) W' IE)
     , spy (ofType (setSum A B) _ IE) 
     , spy (pi z\ locDecl z (setSum A B) => ofType (C z) col IE)
     , spy (pi x\ locDecl x A => 
        spy(isa (Cl x) C_inl (Cl' x) IE),
        pi l\ (locDecl l (setSum A B), copy l (inl A B x)) => conv (C l) C_inl
       ) 
     , spy (pi y\ locDecl y B => % XXX: non dipendente su x: A?
        isa (Cr y) C_inr (Cr' y) IE,
        pi r\ (locDecl r (setSum A B), copy r (inr A B y)) => conv (C r) C_inr
       ) 
     , pi w\ (locDecl w (setSum A B), copy w W') => conv (C w) C_W
     .

hstep (elim_setSum _C W Cl _Cr) Res
    :- hnf W (inl _A _B Wl)
    ,  subst Cl [Wl] Res'
    ,  hnf Res' Res
    .
hstep (elim_setSum _C W _Cl Cr) Res
    :- hnf W (inr _A _B Wr)
    ,  subst Cr [Wr] Res'
    ,  hnf Res' Res
    .

dconv (setSum A B) (setSum A' B')
    :- conv A A'
    ,  conv B B'
    .

dconv (inr A B BB) (inr A' B' BB') 
    :- conv A A'
    ,  conv B B'
    ,  conv BB BB'
    .

dconv (inl A B AA) (inl A' B' AA')  
    :- conv A A'
    ,  conv B B'
    ,  conv AA AA'
    .

dconv (elim_setSum C W Cl Cr) (elim_setSum C' W' Cl' Cr') 
    :- conv W W'
    ,  isa W (setSum A B) _ _
    ,  pi z\ locDecl z (setSum A B) => conv (C z) (C' z)
    ,  pi x\ locDecl x A => conv (Cl x) (Cl' x)
    ,  pi y\ locDecl y B => conv (Cr y) (Cr' y)
    .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                 ESTRAZIONE                                 %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Starification

starify_type (setSum A B) LibMap Result
    :- starify_type A LibMap A'
    ,  starify_type B LibMap B'
    ,  Result = (setSum A' B')
    ,  !
    .

starify_term (inl A B AA) LibMap Result
    :- starify_type A LibMap A'
    ,  starify_type B LibMap B'
    ,  starify_term AA LibMap AA'
    ,  Result = (inl A' B' AA')
    ,  !
    .

starify_term (inr A B BB) LibMap Result
    :- starify_type A LibMap A'
    ,  starify_type B LibMap B'
    ,  starify_term BB LibMap BB'
    ,  Result = (inr A' B' BB')
    ,  !
    .

starify_term (elim_setSum C W Cl Cr) LibMap Result
    :- starify_term W LibMap W'
    ,  isa W (setSum L R) @level
    ,  ((name C, C' = C)
        , !; pi w\ locDecl w (setSum L R) => starify_type (C w) LibMap (C' w))
    ,  ((name Cl, Cl' = Cl)
        , !; pi l\ locDecl l L => starify_term (Cl l) LibMap (Cl' l))
    ,  ((name Cr, Cr' = Cr)
        , !; pi r\ locDecl r R => starify_term (Cr r) LibMap (Cr' r))
    ,  Result = (elim_setSum C' W' Cl' Cr')
    ,  !
    .

%% Extraction

extract_type (setSum A B) Result Context SetList
    :- extract_type A A' Context AList
    ,  extract_type B B' Context BList
    ,  concat [BList, AList] SetList
    ,  collapse_type (setSum A' B') Result Context []
    ,  !
    .

extract_term (inl A B AA) Result Context SetList
    :- spy(extract_term AA AA' Context AAList)
    ,  spy(extract_type A A' Context AList)
    ,  spy(extract_type B B' Context BList)
    ,  concat [AAList, BList, AList] SetList
    ,  spy(collapse_term (inl A' B' AA') Result Context [])
    ,  !
    .

extract_term (inr A B BB) Result Context SetList
    :- spy(extract_term BB BB' Context BBList)
    ,  spy(extract_type A A' Context AList)
    ,  spy(extract_type B B' Context BList)
    ,  concat [BBList, BList, AList] SetList
    ,  spy(collapse_term (inr A' B' BB') Result Context [])
    ,  !
    .

%% (1 + B') -> A'  ==>  (1 + B') -> A' (preserve_complexity)
collapse_term (elim_setSum C (inl A B AA) Cl Cr) Result _ []
    :- conv A extractor_singleton
    ,  is_complexity_altered (elim_setSum C (inl A B AA) Cl Cr)
    ,  Result = (elim_setSum C (inl A B AA) Cl Cr)
    ,  !
    .

%% (1 + B') -> A'  ==>  A'  (se passato direttamente)
collapse_term (elim_setSum _C (inl A _B _AA) Cl _Cr) Result Context []
    :- conv A extractor_singleton
    ,  extract_term (Cl extractor_star) Result Context []
    ,  !
    .

%% (B' + 1) -> A'  ==>  (1 + B') -> A' (preserve_complexity)
collapse_term (elim_setSum C (inr A B BB) Cl Cr) Result _ []
    :- conv B extractor_singleton
    ,  is_complexity_altered (elim_setSum C (inr A B BB) Cl Cr)
    ,  Result = (elim_setSum C (inr A B BB) Cl Cr)
    ,  !
    .

%% (B' + 1) -> A'  ==>  A'  (se passato direttamente)
collapse_term (elim_setSum _C (inr _A B _BB) _Cl Cr) Result Context []
    :- conv B extractor_singleton
    ,  extract_term (Cr extractor_star) Result Context []
    ,  !
    .

%% (N + B') -> 1  ==>  1  (se passato direttamente)
collapse_term (elim_setSum _C (inl A _B _AA) Cl _Cr) Result _ []
    :- pi a\ locDecl a A => isa (Cl a) extractor_singleton @level
    ,  Result = extractor_star
    ,  !
    .

%% (B' + N) -> 1  ==>  1  (se passato direttamente)
collapse_term (elim_setSum _C (inr _A B _BB) _Cl Cr) Result _ []
    :- pi b\ locDecl b B => isa (Cr b) extractor_singleton @level
    ,  Result = extractor_star
    ,  !
    .

%% (N + B') -> N  ==>  N -> N  (se passato direttamente)
collapse_term (elim_setSum _C (inl A _B AA) Cl _Cr) Result Context ElimList
    :- extract_term (app (lambda A Cl) AA) Result Context ElimList
    ,  !
    .

%% (B' + N) -> N  ==>  N -> N  (se passato direttamente)
collapse_term (elim_setSum _C (inr _A B BB) _Cl Cr) Result Context ElimList
    :- extract_term (app (lambda B Cr) BB) Result Context ElimList
    ,  !
    .

%% N + N -> 1  ==>  1
collapse_term (elim_setSum _C W Cl Cr) Result _ []
    :- of W (setSum A B) @level
    ,  pi a\ locDecl a A => isa (Cl a) extractor_singleton @level
    ,  pi b\ locDecl b B => isa (Cr b) extractor_singleton @level
    ,  Result = extractor_star
    ,  !
    .

extract_term (elim_setSum C W Cl Cr) Result Context SetList
    :- Context = (context Vars VarMap LibMap)
    ,  extract_term W W' Context WList
    ,  isa W (setSum L R) @level
    ,  isa W' (setSum L' R') @level
    ,  ((name C, map_var C VarMap C', CList = [])
        , !; pi w\ locDecl w (setSum L R) => pi m\ locDecl m (setSum L' R') =>
            extract_type (C w) (C' m)
            (context [var_term _ m|[var_term _ w|Vars]] [var_mapping w m|VarMap] LibMap)
            CList)
    ,  ((name Cl, map_var Cl VarMap Cl', ClList = [])
        , !; pi l\ locDecl l L => pi i\ locDecl i L' =>
            extract_term (Cl l) (Cl' i)
            (context [var_term _ i|[var_term _ l|Vars]] [var_mapping l i|VarMap] LibMap)
            ClList)
    ,  ((name Cr, map_var Cr VarMap Cr', CrList = [])
        , !; pi r\ locDecl r R => pi f\ locDecl f R' =>
            extract_term (Cr r) (Cr' f)
            (context [var_term _ f|[var_term _ r|Vars]] [var_mapping r f|VarMap] LibMap)
            CrList)
    ,  spy(collapse_term (elim_setSum C' W' Cl' Cr') Result Context ElimList)
    ,  spy(concat [ElimList, CrList, ClList, CList, WList] SetList)
    ,  !
    .

%% Translation

translate_setSum_to ocaml A' B' Result
    :- Result is "(" ^ A' ^ ", " ^ B' ^ ") set_sum"
    ,  !
    .
translate_setSum_to haskell A' B' Result
    :- Result is "SetSum (" ^ A' ^ ") (" ^ B' ^ ")"
    ,  !
    .

translate_type (setSum A B) LibMap Result
    :- translate_type A LibMap A'
    ,  translate_type B LibMap B'
    ,  translate_setSum_to @language A' B' Result
    ,  !
    .


translate_inl_to ocaml AA' Result
    :- Result is "(Inl " ^ AA' ^ ")"
    ,  !
    .
translate_inl_to haskell AA' Result
    :- Result is "(Inl " ^ AA' ^ ")"
    ,  !
    .

translate_term (inl _A _B AA) LibMap Result
    :- translate_term AA LibMap AA'
    ,  translate_inl_to @language AA' Result
    ,  !
    .


translate_inr_to ocaml BB' Result
    :- Result is "(Inr " ^ BB' ^ ")"
    ,  !
    .
translate_inr_to haskell BB' Result
    :- Result is "(Inr " ^ BB' ^ ")"
    ,  !
    .

translate_term (inr _A _B BB) LibMap Result
    :- translate_term BB LibMap BB'
    ,  translate_inr_to @language BB' Result
    ,  !
    .

translate_elim_setSum_abs_to ocaml SCx Sx Result
    :- Result is "(fun " ^ Sx ^ " -> " ^ SCx ^ ")"
    ,  !
    .
translate_elim_setSum_abs_to haskell SCx Sx Result
    :- Result is "(\\" ^ Sx ^ " -> " ^ SCx ^ ")"
    ,  !
    .
translate_elim_setSum_to ocaml W' Cl' Cr' Result
    :- Result is "(match " ^ W' ^ " with | Inl inl -> " ^ Cl' ^ " inl | Inr inr -> " ^ Cr' ^ " inr)"
    ,  !
    .
translate_elim_setSum_to haskell W' Cl' Cr' Result
    :- Result is "(case " ^ W' ^ " of {Inl inl -> " ^ Cl' ^ " inl; Inr inr -> " ^ Cr' ^ " inr})"
    ,  !
    .

translate_term (elim_setSum _C W Cl Cr) LibMap Result
    :- translate_term W LibMap W'
    ,  isa W (setSum L R) @level
    ,  ((name Cl, term_to_string Cl Cl')
        , !; pi l\ locDecl l L => (translate_term (Cl l) LibMap SCl, translate_term l LibMap Sl)
            , translate_elim_setSum_abs_to @language SCl Sl Cl')
    ,  ((name Cr, term_to_string Cr Cr')
        , !; pi r\ locDecl r R => (translate_term (Cr r) LibMap SCr, translate_term r LibMap Sr)
            , translate_elim_setSum_abs_to @language SCr Sr Cr')
    ,  translate_elim_setSum_to @language W' Cl' Cr' Result
    ,  !
    .
