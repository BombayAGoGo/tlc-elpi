type implies    mttType -> mttType -> mttType.
type impl_lam   mttType -> (mttTerm -> mttTerm) -> mttTerm.
type impl_app   mttTerm -> mttTerm -> mttTerm.


ofType (implies B C) KIND IE
    :- ofType B KIND1 IE
    ,  (pi x\ locDecl x B => ofType C KIND2 IE)
    ,  (pts_prop KIND1 KIND2 KIND)
    .

of (impl_lam B F) (implies B C) IE
    :- spy(pi x\ locDecl x B => of (F x) C IE)
    ,  spy(ofType (implies B C) _ IE)
    .

of (impl_app Lam X) C IE
    :- spy(isa Lam (implies B C) IE)
    ,  spy(isa X B IE)
    .

hstep (impl_app LAM Bb) (F Bb)
    :- hnf LAM (impl_lam _B F)
    .

        
dconv (implies B C) (implies B' C') :- spy(conv B B'), spy(conv C C').
dconv (impl_app F X) (impl_app F' X') :- (conv F F'), (conv X X').
dconv (impl_lam B F) (impl_lam B' F') 
    :- (conv B B')
    ,  pi x\ locDecl x B => conv (F x) (F' x)
    .

interp (implies B C) (forall Bi Ci) 
    :- interp B Bi
    ,  spy(pi x\ pi xi\ interp x xi => locDecl x B => locDecl xi Bi => interp C (Ci xi))
    .

interp (impl_lam B F) (forall_lam Bi Fi) 
    :- of (impl_lam B F) (implies B C_) ext
    ,  spy(interp B Bi)
    ,  spy(pi x\ pi xi\ (locDecl x B, locDecl xi Bi, interp x xi) => interp (F x) (Fi xi))
    .

interp (impl_app F X ) (forall_app Fi Xi) 
    :- spy(interp X Xi)
    ,  spy(interp F Fi)
    .

tau (implies B C) (implies B' C') P
    :- spy(tau B' B FB)
    ,  interp B' Bi'
    ,  spy(macro_tau B B' 
        x\x'\h\xi\xi'\hi\ tau C C' FC') 
    ,  spy(P = w\ impl_lam Bi' x\ FC' (app w (FB x)))
    . 

/* NEW INTERPRETATION AND LIBRARY */

type impliesLib list libraryEntry -> prop.
type implies_proof_trasp mttType -> (mttTerm -> mttType) -> (mttTerm -> mttType) -> mttTerm -> mttTerm -> mttTerm.
type implies_setoidDep mttType -> (mttTerm -> mttType) -> (mttTerm -> mttType) -> mttTerm -> mttTerm -> mttTerm -> mttTerm.
type castDepForall mttType -> (mttTerm -> mttType) -> (mttTerm -> mttType) -> mttTerm -> mttTerm -> mttTerm -> mttTerm -> mttTerm ->
     		     	     mttTerm -> mttTerm -> mttTerm.

new_interp_type (implies B C) O :-
     spy(interp B Bi),
     spy(macro_interp B (x\xi\_\_\ interp C (Ci xi))),
     O = prop_setoid (forall Bi Ci).

new_interp_dep_type A (a\ implies (B a) (C a)) O :-
     spy (interp A Ai),
     macro_interp A (a\ai\_\_\ interp (B a) (Bi ai)),
     spy(macro_interp (setSigma A B) (x\xi\_\_\ interp (C (p1 x)) (Ci xi))),       %% C dipende solo da A, Ci dipende dal setSigma
     		      		     		       	      	      		   %% A è insieme mentre B è prop.
     new_interp_type A As,
     new_interp_dep_type A B Bs,
     new_interp_dep_type (setSigma A B) (x \ C (p1 x)) Cs, 
     O = implies_setoidDep Ai Bi Ci As Bs Cs.

impliesLib L :- L = [

%% proof_trasp term parametrized on cast-carrier term
(univPi Ai\
 univDepProp Ai Bi\
 univDepProp (setSigma Ai Bi) Ci\
 univPiT (setoid Ai) aS\
 univPiT (setSigma  (setPi Ai x\ setoid (forall (Bi x) (b\ Ci (pair Ai Bi x b)))) _\
		    (setPi Ai x1\ setPi Ai x2\ setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
		     	   setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) _\
			    (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b))))) cc\
 (locDefL (implies_proof_trasp Ai Bi Ci aS cc)
 	  (setPi Ai x1\ setPi Ai x2\
		     setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) y1\ setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) y2\
		      setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) d1\
		       setPi (decode (app (app (app (setoid_rel (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))))
				     (app (elim_setSigma cc
						   (_\ (setPi Ai x\ setoid (forall (Bi x) (b\ Ci (pair Ai Bi x b)))))
					  (x\y\x)) x1)) y1) y2)) d2\
		      (decode (app (app (app (setoid_rel (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b))))
					(app (elim_setSigma cc
						   (_\ (setPi Ai x\ setoid (forall (Bi x) (b\ Ci (pair Ai Bi x b)))))
					     (x\y\x))
					     x2))
				(app (app (app (app (elim_setSigma cc
								(_\ (setPi Ai x1\ setPi Ai x2\
								   setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
										setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) _\
										  (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b)))))
									   (x\y\y)) x1) x2) d1) y1))
				(app (app (app (app (elim_setSigma cc
								(_\ (setPi Ai x1\ setPi Ai x2\
								   setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
										setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) _\
										 (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b)))))
									   (x\y\y)) x1) x2) d1) y2))))
 	  (fixMe "proof_trasp" (setPi Ai x1\ setPi Ai x2\
		     setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) y1\ setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) y2\
		      setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) d1\
		       setPi (decode (app (app (app (setoid_rel (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))))
				     (app (elim_setSigma cc
						   (_\ (setPi Ai x\ setoid (forall (Bi x) (b\ Ci (pair Ai Bi x b)))))
					  (x\y\x)) x1)) y1) y2)) d2\
		      (decode (app (app (app (setoid_rel (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b))))
					(app (elim_setSigma cc
						   (_\ (setPi Ai x\ setoid (forall (Bi x) (b\ Ci (pair Ai Bi x b)))))
					     (x\y\x))
					     x2))
				(app (app (app (app (elim_setSigma cc
								(_\ (setPi Ai x1\ setPi Ai x2\
								   setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
										setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) _\
										  (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b)))))
									   (x\y\y)) x1) x2) d1) y1))
				(app (app (app (app (elim_setSigma cc
								(_\ (setPi Ai x1\ setPi Ai x2\
								   setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
										setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) _\
										 (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b)))))
									   (x\y\y)) x1) x2) d1) y2))))))),
(univPi Ai\
 univDepProp Ai Bi\
 univDepProp (setSigma Ai Bi) Ci\
 univPiT (setoid Ai) aS\
 univPiT (setoidDep Ai Bi aS) bS\
 univPiT (setoidDep (setSigma Ai Bi) Ci (setSigma_setoid Ai Bi aS bS)) cS\
 (hyp
      (pi x1\ isa x1 Ai int => pi x2\ isa x2 Ai int => pi y1\ isa y1 (Bi x1) int => pi y2\ isa y2 (Bi x2) int =>
        pi p\ isa p (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) int =>
         conv y2 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p) y1) =>
          conv y1 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                     (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
		     y2))
      (pi x1\ locDecl x1 Ai  => pi x2\ locDecl x2 Ai  => pi y1\ locDecl y1 (Bi x1)  => pi y2\ locDecl y2 (Bi x2)  =>
        pi p\ locDecl p (decode (app (app (app (setoid_rel Ai) aS) x1) x2))  =>
         conv y2 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p) y1) =>
          conv y1 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                     (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
		     y2))
     (hyp
       (pi x1\ isa x1 Ai int => pi x2\ isa x2 Ai int => pi y1\ isa y1 (Bi x1) int =>
        pi p\ isa p (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) int =>
         conv (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                   (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
              	   (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p)
		   y1))
	       y1)
       (pi x1\ locDecl x1 Ai  => pi x2\ locDecl x2 Ai  => pi y1\ locDecl y1 (Bi x1)  =>
        pi p\ locDecl p (decode (app (app (app (setoid_rel Ai) aS) x1) x2))  =>
         conv (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                   (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
              	   (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p)
		   y1))
	       y1)
     (hyp
      (pi x1\ isa x1 Ai int => pi x2\ isa x2 Ai int => pi y2\ isa y2 (Bi x2) int =>
        pi p\ isa p (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) int =>
       	conv y2
            (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p)
              	 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                      (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
		 y2)))
      (pi x1\ locDecl x1 Ai => pi x2\ locDecl x2 Ai => pi y2\ locDecl y2 (Bi x2) =>
        pi p\ locDecl p (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) =>
       	conv y2
            (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p)
              	 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                      (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
		 y2)))
      % hyp on reflexivity
      (hyp
	(pi x\ isa x Ai int => pi y \ isa y (Bi x) int =>
          conv y (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x) x) (forall_app (app (setoid_reflL Ai) aS) x)) y))
        (pi x\ locDecl x Ai => pi y \ locDecl y (Bi x) =>
          spy (conv y (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x) x) (forall_app (app (setoid_reflL Ai) aS) x)) y)))
    (locDefL (implies_setoidDep Ai Bi Ci aS bS cS) (setoidDep Ai (a\ (forall (Bi a) (b\ Ci (pair Ai Bi a b)))) aS)
          (pair  (setSigma % Carrier type
	       	        (setPi Ai x\ setoid (forall (Bi x) (b\ Ci (pair Ai Bi x b)))) _\
			% Cast type
		  	(setPi Ai x1\ setPi Ai x2\ setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
		     	   setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) _\
			    (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b)))))
		 (cc\
		 % proof_trasp type
		 (setPi Ai x1\ setPi Ai x2\
		   setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) y1\ setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) y2\
		    setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) d1\
		     setPi (decode (app (app (app (setoid_rel (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))))
				   (app (elim_setSigma cc (_\ (setPi Ai x\ setoid (forall (Bi x) (b\ Ci (pair Ai Bi x b)))))
					(x\y\x)) x1)) y1) y2)) d2\
		      (decode (app (app (app (setoid_rel (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b))))
					(app (elim_setSigma cc (_\ (setPi Ai x\ setoid (forall (Bi x) (b\ Ci (pair Ai Bi x b)))))
					     (x\y\x))
					     x2))
					(app (app (app (app (elim_setSigma cc
								(_\ (setPi Ai x1\ setPi Ai x2\
								   setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
										setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) _\
										  (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b)))))
									   (x\y\y)) x1) x2) d1) y1))
					(app (app (app (app (elim_setSigma cc
								(_\ (setPi Ai x1\ setPi Ai x2\
								   setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
										setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) _\
										 (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b)))))
									   (x\y\y)) x1) x2) d1) y2)))))
		  (pair (setPi Ai x\ setoid (forall (Bi x) (b\ Ci (pair Ai Bi x b))))
		  	(_\ (setPi Ai x1\ setPi Ai x2\ setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
		     	    	   setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) _\
			    	   	 (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b)))))
			% Carrier term
			(lambda Ai x\ prop_setoid (forall (Bi x) (b\ Ci (pair Ai Bi x b))))
			% Cast term
			(lambda Ai x1\ lambda Ai x2\ lambda (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) d\
			  lambda (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) f\
			   (castDepForall Ai Bi Ci aS bS cS x1 x2 d f)))
	          % proof_trasp term
		  (lambda Ai x1\ lambda Ai x2\
 		    lambda (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) y1\
 		     lambda (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) y2\
 		      lambda (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) d1\
 		       lambda (decode (app (app (app (setoid_rel (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))))
				     (prop_setoid (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))))) y1) y2)) d2\
 		   mk_trueT)
  )))))))
 ].