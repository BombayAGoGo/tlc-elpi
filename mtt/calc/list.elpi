%%-- list

type list mttType -> mttType.
type list_empty mttType -> mttTerm.
type list_cons mttType -> mttTerm -> mttTerm -> mttTerm.
type elim_list (mttTerm -> mttType)
             -> mttTerm -> mttTerm
             -> (mttTerm -> mttTerm -> mttTerm -> mttTerm) -> mttTerm.

ofType (list C) set IE
    :- ofType C Kind IE
    ,  pts_leq Kind set
    .

of (list_empty C) (list C) (list_empty C) IE 
    :- ofType (list C) set IE
    .

of (list_cons C Head Tail) (list C) (list_cons C Head' Tail') IE  
    :- ofType (list C) set IE
    ,  isa Head C Head' IE
    ,  isa Tail (list C) Tail' IE
    .

of (elim_list L List LA LL) (L List) (elim_list L List' LA' LL') IE 
    :- spy(of List (list C) List' IE) 
    ,  spy(pi z\ locDecl z (list C) => ofType (L z) _ IE)
    %,  spy(isa LA (L (list_empty C)) LA' IE)
    ,  spy(isa LA L_empty LA' IE)
    ,  spy(pi e\ (locDecl e (list C), copy e (list_empty C)) => conv (L e) L_empty)
    ,  spy(pi y x z\ (locDecl y C, locDecl x (list C), locDecl z (L x)) =>
        isa (LL y x z) L_cons (LL' x y z) IE,
        pi cs\ (locDecl cs (list C), copy cs (cons y x)) => conv (L cs) L_cons
       )
    .


hstep (elim_list _L List LA _LL) LA 
    :- hnf List (list_empty _C)
    .

hstep (elim_list L List LA LL) Res
    :- hnf List (list_cons _C Head Tail)
    ,  hnf (elim_list L Tail LA LL) RecRes
    ,  subst LL [Head, Tail, RecRes] Res'
    ,  hnf Res' Res
    .


dconv (list C) (list C')
    :- conv C C'
    .

dconv (list_empty C) (list_empty C')
    :- conv C C'
    .

dconv (list_cons C Head Tail) (list_cons C' Head' Tail')
    :- conv C C'
    ,  conv Head Head'
    ,  conv Tail Tail'
    .

dconv (elim_list L List LA LL) (elim_list L' List' LA' LL') 
    :- conv List List'
    ,  isa List (list C) _ _
    ,  pi z\ locDecl z (list C) => conv (L z) (L' z)
    ,  conv LA LA'
    ,  pi y\ locDecl y C => pi x\ locDecl x (list C) => pi z\ locDecl z (L x) => 
        conv (LL y x z) (LL' y x z)
