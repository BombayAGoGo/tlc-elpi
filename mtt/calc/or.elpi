%%-- propositional disjunction: or

type or mttType -> mttType -> mttType.
type inl_or, inr_or mttType -> mttType -> mttTerm -> mttTerm.
type elim_or mttType -> mttTerm -> (mttTerm -> mttTerm) -> (mttTerm -> mttTerm) -> mttTerm.

ofType (or A B) KIND IE 
    :- ofType A KIND1 IE
    ,  ofType B KIND2 IE
    ,  (pts_prop KIND1 KIND2 KIND).

of (inr_or A B Bb) (or A B) (inr_or A B Bb') IE 
    :- ofType (or A B) _ IE
     , (isa Bb B Bb' IE)
     .

of (inl_or A B Aa) (or A B) (inl_or A B Aa') IE  
    :- ofType (or A B) _ IE
     , (isa Aa A Aa' IE)
     .

of (elim_or C W Cl Cr) C (elim_or C W' Cl' Cr') IE 
    :- spy (of W (or A B) W' IE)
     , spy (pi z\ locDecl z (or A B) => ofType C KIND IE)
     , spy (pts_leq KIND propc)
     , spy (pi x\ locDecl x A => spy(isa (Cl x) C (Cl' x) IE) ) 
     , spy (pi y\ locDecl y B => isa (Cr y) C (Cr' y) IE) 
     .

hstep (elim_or _C W Cl _Cr) Res
    :- (hnf W (inl_or _A _B Wl))
    ,  subst Cl [Wl] Res'
    ,  hnf Res' Res
    .

hstep (elim_or _C W _Cl Cr) Res
    :- (hnf W (inr_or _A _B Wr))
    ,  subst Cr [Wr] Res'
    ,  hnf Res' Res
    .

dconv (or A B) (or A' B') 
    :- conv A A'
    ,  conv B B'
    .

dconv (inr_or A B Bb) (inr_or A' B' Bb')
    :- conv A A'
    ,  conv B B'
    ,  conv Bb Bb'
    .

dconv (inl_or A B Aa) (inl_or A' B' Aa')
    :- conv A A'
    ,  conv B B'
    ,  conv Aa Aa'
    .

dconv (elim_or C W Cl Cr) (elim_or C' W' Cl' Cr')
    :- conv W W'
    ,  isa W (or A B) _ _
    ,  (pi z\ locDecl z (or A B) => conv C C')
    ,  (pi x\ locDecl x A => conv (Cl z) (Cl' z)) 
    ,  (pi y\ locDecl y B => conv (Cr z) (Cr' z))
    .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                 ESTRAZIONE                                 %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Starification

starify_type (or A B) LibMap Result
    :- starify_type A LibMap A'
    ,  starify_type B LibMap B'
    ,  Result = (or A' B')
    ,  !
    .

starify_term (inl_or A B AA) LibMap Result
    :- starify_type A LibMap A'
    ,  starify_type B LibMap B'
    ,  starify_term AA LibMap AA'
    ,  Result = (inl_or A' B' AA')
    ,  !
    .

starify_term (inr_or A B BB) LibMap Result
    :- starify_type A LibMap A'
    ,  starify_type B LibMap B'
    ,  starify_term BB LibMap BB'
    ,  Result = (inr_or A' B' BB')
    ,  !
    .

starify_term (elim_or C W Cl Cr) LibMap Result
    :- starify_term W LibMap W'
    ,  starify_type C LibMap C'
    ,  isa W (or L R) @level
    ,  ((name Cl, Cl' = Cl)
        , !; pi l\ locDecl l L => starify_term (Cl l) LibMap (Cl' l))
    ,  ((name Cr, Cr' = Cr)
        , !; pi r\ locDecl r R => starify_term (Cr r) LibMap (Cr' r))
    ,  Result = (elim_or C' W' Cl' Cr')
    ,  !
    .

%% Extraction

collapse_type (or B C) Result _ []
    :- conv B extractor_singleton
    ,  conv C extractor_singleton
    ,  Result = extractor_singleton
    ,  !
    .

extract_type (or B C) Result Context SetList
    :- extract_type B B' Context BList
    ,  extract_type C C' Context CList
    ,  concat [CList, BList] SetList
    ,  spy(collapse_type (or B' C') Result Context [])
    ,  !
    .

%% 1 -> 1 + 1  ==>  1
collapse_term (inl_or A B AA) Result _ []
    :- isa (inl_or A B AA) (or extractor_singleton extractor_singleton) @level
    ,  Result = extractor_star
    ,  !
    .

extract_term (inl_or A B AA) Result Context SetList
    :- spy(extract_term AA AA' Context AAList)
    ,  spy(extract_type A A' Context AList)
    ,  spy(extract_type B B' Context BList)
    ,  concat [AAList, BList, AList] SetList
    ,  spy(collapse_term (inl_or A' B' AA') Result Context [])
    ,  !
    .

%% 1 -> 1 + 1  ==>  1
collapse_term (inr_or A B BB) Result _ []
    :- isa (inr_or A B BB) (or extractor_singleton extractor_singleton) @level
    ,  Result = extractor_star
    ,  !
    .

extract_term (inr_or A B BB) Result Context SetList
    :- spy(extract_term BB BB' Context BBList)
    ,  spy(extract_type A A' Context AList)
    ,  spy(extract_type B B' Context BList)
    ,  concat [BBList, BList, AList] SetList
    ,  spy(collapse_term (inr_or A' B' BB') Result Context [])
    ,  !
    .

%% 1  ==>  1  (1 + 1)
collapse_term (elim_or _C W (_\extractor_star) (_\extractor_star)) Result _ []
    :- isa W extractor_singleton @level
    ,  Result = extractor_star
    ,  !
    .

%% 1 -> 1  ==>  1  (1 + B')
collapse_term (elim_or _C (inl_or A _B _AA) (_\extractor_star) _Cr) Result _ []
    :- conv A extractor_singleton
    ,  Result = extractor_star
    ,  !
    .

%% 1 -> 1  ==>  1  (B' + 1)
collapse_term (elim_or _C (inr_or _A B _BB) _Cl (_\extractor_star)) Result _ []
    :- conv B extractor_singleton
    ,  Result = extractor_star
    ,  !
    .

extract_term (elim_or C W Cl Cr) Result Context SetList
    :- Context = (context Vars VarMap LibMap)
    ,  extract_term W W' Context WList
    ,  extract_type C C' Context CList
    ,  isa W (or L R) @level
    ,  isa W' (or L' R') @level
    ,  ((name Cl, map_var Cl VarMap Cl', ClList = [])
        , !; pi l\ locDecl l L => pi i\ locDecl i L' =>
            extract_term (Cl l) (Cl' i)
            (context [var_term _ i|[var_term _ l|Vars]] [var_mapping l i|VarMap] LibMap)
            ClList)
    ,  ((name Cr, map_var Cr VarMap Cr', CrList = [])
        , !; pi r\ locDecl r R => pi f\ locDecl f R' =>
            extract_term (Cr r) (Cr' f)
            (context [var_term _ f|[var_term _ r|Vars]] [var_mapping r f|VarMap] LibMap)
            CrList)
    ,  spy(collapse_term (elim_or C' W' Cl' Cr') Result Context ElimList)
    ,  concat [ElimList, CrList, ClList, CList, WList] SetList
    ,  !
    .
