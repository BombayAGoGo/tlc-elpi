%%-- propositional disjunction: or

type or mttType -> mttType -> mttType.
type inl_or, inr_or mttType -> mttType -> mttTerm -> mttTerm.
type elim_or mttType -> mttTerm -> (mttTerm -> mttTerm) -> (mttTerm -> mttTerm) -> mttTerm.

ofType (or A B) KIND IE 
    :- ofType A KIND1 IE
    ,  ofType B KIND2 IE
    ,  (pts_prop KIND1 KIND2 KIND).

of (inr_or A B Bb) (or A B) (inr_or A B Bb') IE 
    :- ofType (or A B) _ IE
     , (isa Bb B Bb' IE)
     .

of (inl_or A B Aa) (or A B) (inl_or A B Aa') IE  
    :- ofType (or A B) _ IE
     , (isa Aa A Aa' IE)
     .

of (elim_or C W Cl Cr) C (elim_or C W' Cl' Cr') IE 
    :- spy (of W (or A B) W' IE)
     , spy (pi z\ locDecl z (or A B) => ofType C KIND IE)
     , spy (pts_leq KIND propc)
     , spy (pi x\ locDecl x A => spy(isa (Cl x) C (Cl' x) IE) ) 
     , spy (pi y\ locDecl y B => isa (Cr y) C (Cr' y) IE) 
     .

hstep (elim_or _C W Cl _Cr) Res
    :- (hnf W (inl_or _A _B Wl))
    ,  subst Cl [Wl] Res'
    ,  hnf Res' Res
    .

hstep (elim_or _C W _Cl Cr) Res
    :- (hnf W (inr_or _A _B Wr))
    ,  subst Cr [Wr] Res'
    ,  hnf Res' Res
    .

dconv (or A B) (or A' B') 
    :- conv A A'
    ,  conv B B'
    .

dconv (inr_or A B Bb) (inr_or A' B' Bb')
    :- conv A A'
    ,  conv B B'
    ,  conv Bb Bb'
    .

dconv (inl_or A B Aa) (inl_or A' B' Aa')
    :- conv A A'
    ,  conv B B'
    ,  conv Aa Aa'
    .

dconv (elim_or C W Cl Cr) (elim_or C' W' Cl' Cr')
    :- conv W W'
    ,  isa W (or A B) _ _
    ,  (pi z\ locDecl z (or A B) => conv C C')
    ,  (pi x\ locDecl x A => conv (Cl z) (Cl' z)) 
    ,  (pi y\ locDecl y B => conv (Cr z) (Cr' z))
    .
