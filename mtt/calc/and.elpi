type and mttType -> mttType -> mttType.
type pair_and mttType -> mttType -> mttTerm -> mttTerm -> mttTerm.
type p1_and, p2_and mttTerm -> mttTerm.

% ---- TYPING ---- %

ofType (and B C) Kind IE :-
    ofType B Kind1 IE,
    ofType C Kind2 IE,
    pts_prop Kind1 Kind2 Kind.
    
of (pair_and B C P Q) (and B C) (pair_and B C P' Q') IE :-
    ofType (and B C) _ IE,
    isa P B P' IE,
    isa Q C Q' IE.

of (p1_and Pair) B (p1_and Pair') IE :- of Pair (and B C_) Pair' IE.
of (p2_and Pair) C (p2_and Pair') IE :- of Pair (and B_ C) Pair' IE.

% ---- REDUCTION ---- %

hstep (p1_and Pair) P :- hnf Pair (pair_and B_ C_ P Q_).
hstep (p2_and Pair) Q :- hnf Pair (pair_and B_ C_ P_ Q).

% ---- CONVERSION ---- %

dconv (and B C) (and B' C') :- conv B B', conv C C'.

dconv (pair_and B C P Q) (pair_and B' C' P' Q') :-
    conv B B', conv C C', conv P P', conv Q Q'.

dconv (p1_and Pair) (p1_and Pair') :- conv Pair Pair'.
dconv (p2_and Pair) (p2_and Pair') :- conv Pair Pair'.
