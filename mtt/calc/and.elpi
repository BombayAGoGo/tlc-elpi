type and mttType -> mttType -> mttType.
type pair_and mttType -> mttType -> mttTerm -> mttTerm -> mttTerm.
type p1_and, p2_and mttTerm -> mttTerm.

% ---- TYPING ---- %

ofType (and B C) Kind IE :-
    ofType B Kind1 IE,
    ofType C Kind2 IE,
    pts_prop Kind1 Kind2 Kind.
    
of (pair_and B C P Q) (and B C) (pair_and B C P' Q') IE :-
    ofType (and B C) _ IE,
    isa P B P' IE,
    isa Q C Q' IE.

of (p1_and Pair) B (p1_and Pair') IE :- of Pair (and B C_) Pair' IE.
of (p2_and Pair) C (p2_and Pair') IE :- of Pair (and B_ C) Pair' IE.

% ---- REDUCTION ---- %

hstep (p1_and Pair) P :- hnf Pair (pair_and B_ C_ P Q_).
hstep (p2_and Pair) Q :- hnf Pair (pair_and B_ C_ P_ Q).

% ---- CONVERSION ---- %

dconv (and B C) (and B' C') :- conv B B', conv C C'.

dconv (pair_and B C P Q) (pair_and B' C' P' Q') :-
    conv B B', conv C C', conv P P', conv Q Q'.

dconv (p1_and Pair) (p1_and Pair') :- conv Pair Pair'.
dconv (p2_and Pair) (p2_and Pair') :- conv Pair Pair'.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                 ESTRAZIONE                                 %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Starification

starify_type (and B C) LibMap Result
    :- starify_type B LibMap B'
    ,  starify_type C LibMap C'
    ,  Result = (and B' C')
    ,  !
    .

starify_term (pair_and B C BB CC) LibMap Result 
    :- starify_term BB LibMap BB'
    ,  starify_term CC LibMap CC'
    ,  starify_type (and B C) LibMap (and B' C')
    ,  spy(Result = (pair_and B' C' BB' CC'))
    ,  !
    .

starify_term (p1_and Pair) LibMap Result
    :- starify_term Pair LibMap Pair'
    ,  spy(Result = (p1_and Pair'))
    ,  !
    .

starify_term (p2_and Pair) LibMap Result
    :- starify_term Pair LibMap Pair'
    ,  spy(Result = (p2_and Pair'))
    ,  !
    .

%% Extraction

collapse_type (and B C) Result _ []
    :- conv B extractor_singleton
    ,  conv C extractor_singleton
    ,  Result = extractor_singleton
    ,  !
    .

extract_type (and B C) Result Context SetList
    :- extract_type B B' Context BList
    ,  extract_type C C' Context CList
    ,  concat [CList, BList] SetList
    ,  spy(collapse_type (and B' C') Result Context [])
    ,  !
    .

%% 1 -> 1 -> 1 x 1  ==>  1
collapse_term (pair_and B C BB CC) Result _ []
    :- isa (pair_and B C BB CC) (and extractor_singleton extractor_singleton) @level
    ,  Result = extractor_star
    ,  !
    .

extract_term (pair_and B C BB CC) Result Context SetList
    :- extract_term BB BB' Context BBList
    ,  extract_term CC CC' Context CCList
    ,  extract_type B B' Context BList
    ,  extract_type C C' Context CList
    ,  concat [CCList, BBList, CList, BList] SetList
    ,  spy(collapse_term (pair_and B' C' BB' CC') Result Context [])
    ,  !
    .

%% 1 -> 1  ==>  1
collapse_term (p1_and Pair) Result _ []
    :- isa Pair extractor_singleton @level
    ,  Result = extractor_star
    ,  !
    .

%% 1 x 1 -> 1  ==>  1
collapse_term (p1_and Pair) Result _ []
    :- isa Pair (and extractor_singleton extractor_singleton) @level
    ,  Result = extractor_star
    ,  !
    .

extract_term (p1_and Pair) Result Context SetList
    :- extract_term Pair Pair' Context SetList
    ,  spy(collapse_term (p1_and Pair') Result Context [])
    ,  !
    .

%% 1 -> 1  ==>  1
collapse_term (p2_and Pair) Result _ []
    :- isa Pair extractor_singleton @level
    ,  Result = extractor_star
    ,  !
    .

%% 1 x 1 -> 1  ==>  1
collapse_term (p2_and Pair) Result _ []
    :- isa Pair (and extractor_singleton extractor_singleton) @level
    ,  Result = extractor_star
    ,  !
    .

extract_term (p2_and Pair) Result Context SetList
    :- extract_term Pair Pair' Context SetList
    ,  spy(collapse_term (p2_and Pair') Result Context [])
    ,  !
    .
