type forall     mttType -> (mttTerm -> mttType) -> mttType.
type forall_lam mttType -> (mttTerm -> mttTerm) -> mttTerm.
type forall_app mttTerm -> mttTerm -> mttTerm.

ofType (forall B C) KIND IE 
    :- spy(ofType B KIND1 IE)
    ,  spy(pi x\ locDecl x B  => spy(ofType (C x) KIND2 IE))
    ,  spy(pts_for KIND1 KIND2 KIND)
    .

of (forall_lam B F) (forall B C) IE
    :- spy(pi x\ locDecl x B => of (F x) (C x) IE)
    ,  spy(ofType (forall B C) _ IE)
    .

of (forall_app Lam X) (CX) IE 
    :- spy(isa Lam (forall B C) IE)
    ,  spy(isa X B IE)
    ,  spy(CX = C X)
    .

hstep (forall_app LAM Bb) (F Bb) 
    :- hnf LAM (forall_lam _B F)
    .

dconv (forall B C) (forall B' C') 
    :- (conv B B')
    ,  (pi x\ locDecl x B => conv (C x) (C' x))
    .
dconv (forall_app F X) (forall_app F' X') :- (conv F F'), (conv X X').

interp (forall B C) (forall B' C') :-
        spy (interp B B'),
        spy (pi x\ pi x'\ interp x x' 
            => locDecl x B 
                => locDecl x' B' 
                    => spy(interp (C x )(C'  x')))
    .

interp (forall_app F X) (forall_app Fi Xi)
    :- interp F Fi
    ,  interp X Xi
    .

interp (forall_lam B F) (forall_lam Bi Fi)
    :- spy(interp B Bi)
    ,  spy(pi x\ pi xi\ (locDecl x B, locDecl xi Bi, interp x xi) => interp (F x) (Fi xi))
    .

tau (forall B C) (forall B' C') P
    :- % spy(interp (forall B C) (forall Bi_ Ci_))
    % ,
       spy(interp (forall B' C') (forall Bi' Ci'_))
    ,  spy(tau B' B FB)
    ,  spy(macro_tau B B'
        (x\x'\_\xi\xi'\hi\ tau (C x) (C' x') (FC' xi xi' hi)))
    ,  spy(setoid_refl B Hi)
    ,  spy(P = f\lambda Bi' x\ FC' (FB x) x (Hi (FB x)) (app f (FB x)))
    .

/* NEW INTERPRETATION AND LIBRARY */

type forallLib list libraryEntry -> prop.
type forall_setoidDep mttType -> (mttTerm -> mttType) -> (mttTerm -> mttType) -> mttTerm -> mttTerm -> mttTerm -> mttTerm.

new_interp_type (forall B C) O :-
     spy(interp B Bi),
     spy(macro_interp B (x\xi\_\_\ interp (C x) (Ci xi))),
     O = prop_setoid (forall Bi Ci).

new_interp_dep_type A (a\ forall (B a) (C a)) O :-
     spy (interp A Ai),
     macro_interp A (a\ai\_\_\ interp (B a) (Bi ai)),
     spy(macro_interp (setSigma A B) (x\xi\_\_\ interp (C (p1 x) (p2 x)) (Ci xi))),       %% C dipende solo da A, Ci dipende dal setSigma
     		      		     		       	      	      		   %% A è insieme mentre B è prop.
     new_interp_type A As,
     new_interp_dep_type A B Bs,
     new_interp_dep_type (setSigma A B) (x \ (C (p1 x) (p2 x))) Cs, 
     O = forall_setoidDep Ai Bi Ci As Bs Cs.

forallLib L :- L = [

%% castDepForall: cast universal quantifier f : setPi (Bi a1) (b\ Ci (pair Ai Bi a1 b))
%% 		       into universal quantifier   : setPi (Bi a2) (b\ Ci (pair Ai Bi a2 b))
%%  IT NEEDS TO BE PROCESSED BEFORE IMPLIES
 (univPi Ai\
 univDepProp Ai Bi\
 univDepProp (setSigma Ai Bi) Ci\
  univPiT (setoid Ai) aS\
  univPiT (setoidDep Ai Bi aS) bS\
  univPiT (setoidDep (setSigma Ai Bi) Ci (setSigma_setoid Ai Bi aS bS)) cS\
   univPiT Ai a1\
   univPiT Ai a2\
   univPiT (decode (app (app (app (setoid_rel Ai) aS) a1) a2)) d\
   univPiT (forall (Bi a1) (b\ Ci (pair Ai Bi a1 b))) f\
   (hyp
      (pi x1\ isa x1 Ai int => pi x2\ isa x2 Ai int => pi y1\ isa y1 (Bi x1) int => pi y2\ isa y2 (Bi x2) int =>
        pi p\ isa p (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) int =>
         conv y2 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p) y1) =>
          conv y1 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                     (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
		     y2))
      (pi x1\ locDecl x1 Ai  => pi x2\ locDecl x2 Ai  => pi y1\ locDecl y1 (Bi x1)  => pi y2\ locDecl y2 (Bi x2)  =>
        pi p\ locDecl p (decode (app (app (app (setoid_rel Ai) aS) x1) x2))  =>
         conv y2 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p) y1) =>
          conv y1 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                     (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
		     y2))
     (hyp
       (pi x1\ isa x1 Ai int => pi x2\ isa x2 Ai int => pi y1\ isa y1 (Bi x1) int =>
        pi p\ isa p (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) int =>
         conv (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                   (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
              	   (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p)
		   y1))
	       y1)
       (pi x1\ locDecl x1 Ai  => pi x2\ locDecl x2 Ai  => pi y1\ locDecl y1 (Bi x1)  =>
        pi p\ locDecl p (decode (app (app (app (setoid_rel Ai) aS) x1) x2))  =>
         conv (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                   (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
              	   (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p)
		   y1))
	       y1)
     (hyp
      (pi x1\ isa x1 Ai int => pi x2\ isa x2 Ai int => pi y2\ isa y2 (Bi x2) int =>
        pi p\ isa p (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) int =>
       	conv y2
            (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p)
              	 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                      (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
		 y2)))
      (pi x1\ locDecl x1 Ai => pi x2\ locDecl x2 Ai => pi y2\ locDecl y2 (Bi x2) =>
        pi p\ locDecl p (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) =>
       	conv y2
            (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p)
              	 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                      (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
		 y2)))
      % hyp on reflexivity
      (hyp
	(pi x\ isa x Ai int => pi y \ isa y (Bi x) int =>
          conv y (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x) x) (forall_app (app (setoid_reflL Ai) aS) x)) y))
        (pi x\ locDecl x Ai => pi y \ locDecl y (Bi x) =>
          spy (conv y (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x) x) (forall_app (app (setoid_reflL Ai) aS) x)) y)))
   (locDefL (castDepForall Ai Bi Ci aS bS cS a1 a2 d f)
   	    (forall (Bi a2) (b\ Ci (pair Ai Bi a2 b)))
   	    (forall_lam (Bi a2) x\ (app (app (app (app (app (setoidDepCast (setSigma Ai Bi) Ci (setSigma_setoid Ai Bi aS bS)) cS)
			       	    	 (pair Ai Bi a1 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) a2) a1)
				    	     	    (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) a1) a2) d)) x)))
				         (pair Ai Bi a2 x))
					 (pair_exist (decode (app (app (app (setoid_rel Ai) aS) a1) a2))
					 	     (dd \ decode (app (app (app (setoid_rel (Bi a2))
          				   	      	 (app (app (setoidDepCarrier Ai Bi aS) bS) a2))
        					      	 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS)
                				      	       a1) a2) dd)
						       	       (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) a2) a1)
                  				   	       	    (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) a1) a2) d))
							     	      x)))
						          x))
						     d
						     (forall_app (app (setoid_reflL (Bi a2))
						     	  (app (app (setoidDepCarrier Ai Bi aS) bS) a2))
							  x)))
			       	    	 (forall_app f (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) a2) a1)
				    	   	(impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) a1) a2) d)) x)))))))))),


%%%%%%%%% For now this is the same as implies_setoidDep. Maybe I just need this one for both types of proposition (implies as particular
%%%%%%%%% case of universal quantifier)
(univPi Ai\
 univDepProp Ai Bi\
 univDepProp (setSigma Ai Bi) Ci\
 univPiT (setoid Ai) aS\
 univPiT (setoidDep Ai Bi aS) bS\
 univPiT (setoidDep (setSigma Ai Bi) Ci (setSigma_setoid Ai Bi aS bS)) cS\
 (hyp
      (pi x1\ isa x1 Ai int => pi x2\ isa x2 Ai int => pi y1\ isa y1 (Bi x1) int => pi y2\ isa y2 (Bi x2) int =>
        pi p\ isa p (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) int =>
         conv y2 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p) y1) =>
          conv y1 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                     (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
		     y2))
      (pi x1\ locDecl x1 Ai  => pi x2\ locDecl x2 Ai  => pi y1\ locDecl y1 (Bi x1)  => pi y2\ locDecl y2 (Bi x2)  =>
        pi p\ locDecl p (decode (app (app (app (setoid_rel Ai) aS) x1) x2))  =>
         conv y2 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p) y1) =>
          conv y1 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                     (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
		     y2))
     (hyp
       (pi x1\ isa x1 Ai int => pi x2\ isa x2 Ai int => pi y1\ isa y1 (Bi x1) int =>
        pi p\ isa p (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) int =>
         conv (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                   (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
              	   (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p)
		   y1))
	       y1)
       (pi x1\ locDecl x1 Ai  => pi x2\ locDecl x2 Ai  => pi y1\ locDecl y1 (Bi x1)  =>
        pi p\ locDecl p (decode (app (app (app (setoid_rel Ai) aS) x1) x2))  =>
         conv (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                   (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
              	   (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p)
		   y1))
	       y1)
     (hyp
      (pi x1\ isa x1 Ai int => pi x2\ isa x2 Ai int => pi y2\ isa y2 (Bi x2) int =>
        pi p\ isa p (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) int =>
       	conv y2
            (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p)
              	 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                      (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
		 y2)))
      (pi x1\ locDecl x1 Ai => pi x2\ locDecl x2 Ai => pi y2\ locDecl y2 (Bi x2) =>
        pi p\ locDecl p (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) =>
       	conv y2
            (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x1) x2) p)
              	 (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x2) x1)
                      (impl_app (forall_app (forall_app (app (setoid_symmL Ai) aS) x1) x2) p))
		 y2)))
      % hyp on reflexivity
      (hyp
	(pi x\ isa x Ai int => pi y \ isa y (Bi x) int =>
          conv y (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x) x) (forall_app (app (setoid_reflL Ai) aS) x)) y))
        (pi x\ locDecl x Ai => pi y \ locDecl y (Bi x) =>
          spy (conv y (app (app (app (app (app (setoidDepCast Ai Bi aS) bS) x) x) (forall_app (app (setoid_reflL Ai) aS) x)) y)))
    (locDefL (forall_setoidDep Ai Bi Ci aS bS cS) (setoidDep Ai (a\ (forall (Bi a) (b\ Ci (pair Ai Bi a b)))) aS)
          (pair  (setSigma % Carrier type
	       	        (setPi Ai x\ setoid (forall (Bi x) (b\ Ci (pair Ai Bi x b)))) _\
			% Cast type
		  	(setPi Ai x1\ setPi Ai x2\ setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
		     	   setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) _\
			    (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b)))))
		 (cc\
		 % proof_trasp type
		 (setPi Ai x1\ setPi Ai x2\
		   setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) y1\ setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) y2\
		    setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) d1\
		     setPi (decode (app (app (app (setoid_rel (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))))
				   (app (elim_setSigma cc (_\ (setPi Ai x\ setoid (forall (Bi x) (b\ Ci (pair Ai Bi x b)))))
					(x\y\x)) x1)) y1) y2)) d2\
		      (decode (app (app (app (setoid_rel (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b))))
					(app (elim_setSigma cc (_\ (setPi Ai x\ setoid (forall (Bi x) (b\ Ci (pair Ai Bi x b)))))
					     (x\y\x))
					     x2))
					(app (app (app (app (elim_setSigma cc
								(_\ (setPi Ai x1\ setPi Ai x2\
								   setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
										setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) _\
										  (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b)))))
									   (x\y\y)) x1) x2) d1) y1))
					(app (app (app (app (elim_setSigma cc
								(_\ (setPi Ai x1\ setPi Ai x2\
								   setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
										setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) _\
										 (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b)))))
									   (x\y\y)) x1) x2) d1) y2)))))
		  (pair (setPi Ai x\ setoid (forall (Bi x) (b\ Ci (pair Ai Bi x b))))
		  	(_\ (setPi Ai x1\ setPi Ai x2\ setPi (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) _\
		     	    	   setPi (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) _\
			    	   	 (forall (Bi x2) (b\ Ci (pair Ai Bi x2 b)))))
			% Carrier term
			(lambda Ai x\ prop_setoid (forall (Bi x) (b\ Ci (pair Ai Bi x b))))
			% Cast term
			(lambda Ai x1\ lambda Ai x2\ lambda (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) d\
			  lambda (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) f\
			   (castDepForall Ai Bi Ci aS bS cS x1 x2 d f)))
	          % proof_trasp term
		  (lambda Ai x1\ lambda Ai x2\
 		    lambda (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) y1\
 		     lambda (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))) y2\
 		      lambda (decode (app (app (app (setoid_rel Ai) aS) x1) x2)) d1\
 		       lambda (decode (app (app (app (setoid_rel (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))))
				     (prop_setoid (forall (Bi x1) (b\ Ci (pair Ai Bi x1 b))))) y1) y2)) d2\

                   %% Si tratta di una uguaglianza tra proposizioni
 		   mk_trueT)
  )))))))

].