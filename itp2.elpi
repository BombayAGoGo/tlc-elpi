accumulate utils.
accumulate itp_components/all.

accumulate "commons/typing".
accumulate stlc/lang, stlc/typing, stlc/conv, stlc/pp.

% TODO:
% - tattiche multiple (i.e. su piu' goal)
% - tattiche dovrebbero essere spostate nell'apposito module del linguaggio
% - itp_loop dovrebbe essere spostato in internals
% - questo file dovrebbe contenere solo i predicati di interfaccia

% ------------------- %
% ---- INTERFACE ---- %
% ------------------- %

prove Type ProofTerm OutScript :-
    prove Type [] ProofTerm OutScript.

prove Type InScript ProofTerm OutScript :-
    of X Type ProofTerm,
    itp_loop [goal X Type ProofTerm []] InScript OutScript.

% -------------- %
% ---- LOOP ---- %
% -------------- %

% itp_loops args:
% - list of current open goals
% - input tactics list
% - output script list
mode (itp_loop i i o).
%itp_loop A B C :- print (itp_loop A B C), fail.

itp_loop [] _ [].

% hole - no input - no choice
itp_loop [Goal] [] OutScript :- !,
    print_goal Goal,
    prompt_user "input tactic" Tac,
    (Tac = backup, !, fail;
    itp_loop [Goal] [Tac] OutScript;
    itp_loop [Goal] [] OutScript).

% hole - no input - choice
itp_loop Goals [] OutScript :-
    print_goals Goals,
    % TODO:
    % - cambiare input in nome_tattica goal_a_cui_applicarla
    % - selezionare i goal con get_nth ricorsive
    % - applicare la tattica ai goal
    prompt_user "input tactic" Input,
    parse_input Input (Tac, GoalArgs),
    print Tac GoalArgs, halt.
    %get_nth GNum Left Goals Right Goal,
    %append Left Right Rest,
    %prompt_user "input tactic" Tac,
    %(Tac = backup, !, fail;
    %itp_loop (Goal :: Rest) [Tac] OutScript;
    %itp_loop Goals [] OutScript).

% hole - input
itp_loop (Goal :: Goals) (Tac :: Tacs) OutScript :-
    tac_under_ctx Tac [Goal] NewGoals,
    append NewGoals Goals UpdatedGoals,
    itp_loop UpdatedGoals Tacs OutScript',
    append [Tac] OutScript' OutScript.

% ----------------- %
% ---- TACTICS ---- %
% ----------------- %

% tactic name goals fresh_vars new_goals

tactic (intro N) (goal X Type RTerm VDecls) FVars NewGoals :-
    X = lam N T F,
    build_newgoals RTerm VDecls NewGoals.

tactic (mapp N) (goal X Type RTerm VDecls) FVars NewGoals :-
    get_named N FVars Lam,
    X = app Lam dots,
    build_newgoals RTerm VDecls NewGoals.
