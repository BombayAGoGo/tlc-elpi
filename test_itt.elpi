%accumulate itt/lang.
accumulate itp.
%accumulate itt/tactics.
accumulate itt/theory.
accumulate itt/pp.

%main :- interactive andElimR [intro f, andER f] S.

identity (@arrow a a). 

% ---------------------- %
% ---- K combinator ---- %
% ---------------------- %

% [intro x, intro y, app x]
comb_K (@arrow a (@arrow b a)).

% ---------------------- %
% ---- S combinator ---- %
% ---------------------- %

% [intro g, intro f, intro x, app g, app f, app x, app x]
comb_S (@arrow (@arrow a (@arrow b c)) (@arrow (@arrow a b) (@arrow a c))).

% axioms of conjunction
% [intro f, intro g, andI f g] ==> andI f g porta a delay, andI, app f, app g no.
andIntro (@arrow a (@arrow b (@times a b))).

% [intro p, andEL p]
andElimL (@arrow (@times a b) a).

% [intro p, andER p]
andElimR (@arrow (@times a b) b).

% [intro f, intro z, andE x y z, app, app, app f, app x, app y]
implAnd (@arrow (@arrow a (@arrow b c)) (@arrow (@times a b) c)).

test_all L :-
    print "start",
    interactive identity [intro x, app x] S1,
    print "1/7",
    interactive comb_K [intro x, intro y, app x] S2,
    print "2/7",
    interactive comb_S [intro g, intro f, intro x, app g, app f, app x, app x] S3,
    print "3/7",
    interactive andIntro [intro f, intro g, andI f g] S4,
    print "4/7",
    interactive andElimL [intro p, andEL p] S5,
    print "5/7",
    interactive andElimR [intro p, andER p] S6,
    print "6/7",
    interactive implAnd [intro f, intro z, andE x y z, app, app, app f, app x, app y] S7,
    print "7/7",
    append [S1, S2, S3, S4, S5, S6, S7] [] L.
