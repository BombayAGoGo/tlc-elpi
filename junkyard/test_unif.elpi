accumulate theory.
accumulate unif.

% Some unification problems from the literature
% that aren't in PATTERN and their encodings
% If an atom isn't specified, it's treated as an
% external constant i.e. supposing we are unifying
% under a VEV prefix, a constant is in the first V

% All these should pass

% Miller, 1991
% F x = g b a                   -- x non e' quantificata universalmente
% (v\ m (X v)) = (y\ X (m y))   -- inf soluzioni
miller_a F :- conv (F x) (app (app g b) a).
miller_b X :- conv (lam _ (v\ app m (X v))) (lam _ (y\ (X (app m y)))).

% De Moura, 2008
% ((X (f x)) = f x) & (X (f x) = f (X x))   -- X (f x) non e' nel pattern
% (y\ y (X w)) = (x\ x (u w))               -- 2 soluzioni
de_moura_a X :- (conv (X (app f x)) (app f x)), (conv (X (app f x)) (app f (X x))).
de_moura_b X :- conv (lam _ (y\ app y (X w))) (lam _ (x\ app x (app u w))).

% Abel & Pientka, 2011
% (x y z\ X x y)        = (x y z\ x (succ y))   -- L_lambda
% (x y z\ X x x y)      = ^                     -- non-linearity
% (x y z\ X (Y x) y)    = ^                     -- meta-meta appl x
% (x y z\ X x (succ y)) = ^                     -- succ y is not a variable
abel_pientka_a X :-
    conv
        (lam _ (x\ lam _ (y\ lam _ (z\ X x y))))
        (lam _ (x\ lam _ (y\ lam _ (z\ app x (succ y))))).
abel_pientka_b X :-
    conv
        (lam _ (x\ lam _ (y\ lam _ (z\ X x x y))))
        (lam _ (x\ lam _ (y\ lam _ (z\ app x (succ y))))).
abel_pientka_c X Y :-
    conv
        (lam _ (x\ lam _ (y\ lam _ (z\ X (Y x) y))))
        (lam _ (x\ lam _ (y\ lam _ (z\ app x (succ y))))).
abel_pientka_d X :-
    conv
        (lam _ (x\ lam _ (y\ lam _ (z\ X x (succ y)))))
        (lam _ (x\ lam _ (y\ lam _ (z\ app x (succ y))))).

% Miller & Nadathur, 2012
% F a = g a a                   -- 4 soluzioni
% pi w\ (u (F w)) = (F (u w))   -- inf soluzioni
miller_nadathur_a F :- conv (F a) (app (app g a) a).
miller_nadathur_b F :- pi w\ conv (app u (F w)) (F (app u w)).

% pi w\ (X (u (succ w))) = (u (Y (succ w)))
testa X Y :- pi w x y\ (copy y (succ w), copy x (app u y)) => copy (X x) (app u (Y y)).
% pi \ (X (u (succ w))) = (u (u (Y (succ w))))
testk X Y :- pi w x y\ (hcopy y (succ w), hcopy x (app u y)) => copy (X x) (app u (app u (Y y))).
% pi w\ (X (u (succ w))) = (u (u (Y (succ w))))
testu X :- pi u a b\ (hcopy a u, hcopy b a) => copy (X b) u.
% pi w\ (X (u w)) = (u (Y w))
testb X Y :- conv (X (app u w)) (app u (Y w)).
%testb X :- pi w x y\ copy x (app u w) => copy (X x) (app u (X w)).
% pi w\ (X w) = (u (Y (succ w)))
testc X Y :- pi w y\ copy y (succ w) => copy (app u (Y y)) (X w).
% (X (succ x) y) = (app u (Y x (succ y)))
testd X Y :- pi m n p q\ (copy n y, copy q (succ n), copy p x, copy m (succ p)) => copy (app u (Y p q)) (X m n).
testdd X Y :- pi m n p q\ (copy n y, copy q (succ n), copy p x, copy m (succ p)) => copy (X m n) (app u (Y p q)).
% x\ X x (Y x) = v\ x v
teste X Y :- pi x n\ copy n (Y x) => copy (X x n) (app x v).

testf F :- pi x\ copy x a => copy (F x) (app (app g a) a).

% x\ X x (Y x) = v\ x v         -- 2 soluzioni
% x\ X x (Y (S x)) = v\ x v     -- come sopra
% X x (Y succ x) = (f x) (S x)  -- molte soluzioni
meta_meta_a X Y :- conv (lam _ (x\ X x (Y x)))  (lam _ (v\ app x v)).
meta_meta_b X Y :- conv (lam nat (x\ X x (Y (succ x)))) (lam _ (v\ app x v)).
meta_meta_c X Y :- conv (X x (Y (succ x))) (app (app f x) (succ x)).

pairs? X :- pi x y\ conv (X (pair x y)) x.
