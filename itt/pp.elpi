% Pretty printing module, basic code borrowed from: https://github.com/LPCIC/elpi/blob/master/ELPI.md

mode (pp i o).

%pp A B :- print (pp A B), fail.

pp (lam Name T1 Body) S :-
    term_to_string Name Name',
    (pi x\ name_of x Name' => pp (Body x) S1),
    pp T1 SType,
    S is "λ" ^ Name' ^ ":" ^ SType ^ "." ^ S1.
pp (app Lambda Arg) S :-
    pp Lambda S1,
    pp Arg S2,
    S is "(" ^ S1 ^ " " ^ S2 ^ ")".
pp (prod T1 T2) S :-
    pp T1 S1,
    (pi x\ pp (T2 x) S2),
    S is "∏(" ^ S1 ^ ", " ^ S2 ^ ")".

pp (pair Left Right) S :-
    pp Left SLeft,
    pp Right SRight,
    S is "<" ^ SLeft ^ ", " ^ SRight ^ ">".
pp (split Pair Name1 Name2 Func) S :-
    pp Pair SPair,
    term_to_string Name1 Name1',
    term_to_string Name2 Name2',
    pi x y\ (name_of x Name1', name_of y Name2') => pp (Func x y) SFunc,
    S is "E(" ^ SPair  ^ ", (" ^ Name1' ^ ", " ^ Name2' ^ ")" ^ SFunc ^ ")".
pp (fst Pair) S :-
    pp Pair SPair,
    S is "π₁(" ^ SPair ^ ")".
pp (snd Pair) S :-
    pp Pair SPair,
    S is "π₂(" ^ SPair ^ ")".
pp (sum Tl Tr) S :-
    pp Tl Sl,
    pi x\ pp (Tr x) Sr,
    S is "∑(" ^ Sl ^ ", " ^ Sr ^ ")".

pp zero "Z".
pp (succ N) S :-
    pp N SN,
    S is "S" ^ SN.
pp (natrec N ZeroElement Name1 Name2 RecFun) S :-
    pp N SN,
    pp ZeroElement SZero,
    term_to_string Name1 Name1',
    term_to_string Name2 Name2',
    pi x y\ (name_of x Name1', name_of y Name2') => pp (RecFun x y) SRecFun,
    S is "R(" ^ SN ^ ", " ^ SZero ^ ", " ^ "(" ^ Name1' ^ ", " ^ Name2' ^ ") " ^ SRecFun ^ ")".
pp nat "Nat".

pp (id T X Y) S :-
    pp T TPP, pp X XPP, pp Y YPP,
    S is "I(" ^ TPP ^ ", " ^ XPP ^ ", " ^ YPP ^ ")".
pp (refl T X) S :-
    pp T TPP, pp X XPP,
    S is "refl(" ^ TPP ^ ", " ^ XPP ^ ")".

pp [L] PPL  :- pp L PPL.
pp [L|Ls] S :- pp L PPL, pp Ls PPLs, S is PPL ^ ", " ^ PPLs.
pp (uvar K L) S :-
    term_to_string K SK,
    pp L PPL, S is SK ^ " [" ^ PPL ^ "]".
pp N S :- name N, name_of N S.
pp Term S :- term_to_string Term S. % no special rules, just print the term
