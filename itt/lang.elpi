% IDEA: creare kind set, type star set, poi tipare term -> set -> o i tipi
kind term type. % everything is a term

% Proc definitions (intro and elim will define of, eq will define step, steps, conv)

% typing
type of term -> term -> o.
mode (of i o).
%of T T' :- print (of T T'), fail. 
of (uvar as X) T :- declare_constraint (of X T) [X].

% one step conversion
mode (step i o).
step X Y :- print (step X Y), fail.

% multiple step conversion
mode (steps i o).
steps X Y :- print (steps X Y), fail.
steps M N :- step M M', !, steps M' N.
steps M M.

% rules for term equivalence
mode (conv i i).
conv X Y :- print (conv X Y), fail.
%mode (conv i i).
%conv M N :- steps M M', steps N N', M' = N'.


% --------------------------- %
% ---- CARTESIAN PRODUCT ---- %
% --------------------------- %

% FORMATION
type prod term -> (term -> term) -> term.
%macro @arr A B :- prod A (x\ B).

% INTRODUCTION
type lam string -> term -> (term -> term) -> (term -> term) -> term.
of (lam Name T1 T2 Bd) (prod T1 T2) :- pi x\ of x T1 => of (Bd x) (T2 x).
conv (lam _Name _T1 _T2 Bd) (lam _Name' _T1' _T2' _Bd') :- pi x\ conv (Bd x) (Bd' x). % assumendo che T1 = T2?

% ELIMINATION
type app term -> (term -> term) -> term -> term -> term.
of (app T1 T2 Lam Arg) (T2 Arg) :- of Lam (prod T1 T2), of Arg T1.
conv (app _T1 _T2 Lam Arg) (app _T1' T2' Lam' Arg') :- conv Lam Lam', conv Arg Arg'.

% EQUALITY
step (app _A _B (lam _Name _A _B Bd) Arg) (Bd Arg).
step (app _A _B Lam Arg) Res :-
    steps Lam (lam _Name _A _B Bd),
    step (app _A _B (lam _Name _A _B Bd) Arg) Res.
% eta-equality
%conv (lam _Name _A _B (x\ app F x)) F. % conv o step? e in che direzione i.e. F si riduce a lam o lam a F?

% ------------------------ %
% ---- DISJOINT UNION ---- %
% ------------------------ %

% FORMATION
type sum term -> (term -> term) -> term.

% INTRODUCTION
type pair term -> (term -> term) -> term -> term -> term.
of (pair Tl Tr El Er) (sum Tl Tr) :- of El Tl, of Er (Tr El).
conv (pair _ _ El Er) (pair _ _ El' Er') :- conv El El', conv Er Er'.

% ELIMINATION
type split term -> (term -> term) -> (term -> term) -> term -> string -> string -> (term -> term -> term) -> term.
of (split Tl Tr T Pair VarName1 VarName2 Func) (T Pair) :- 
    of Pair (sum Tl Tr),
    pi x y\ (of x Tl, of y (Tr x)) => of (Func x y) (T (pair Tl Tr x y)).
conv (split _ _ _ Pair _ _ Func) (split  _ _ _ Pair' _ _ Func') :-
    conv Pair Pair',
    pi x y\ conv (Func x y) (Func' x y).

type fst term -> term.
type snd term -> term.
of (fst Pair) Tl :- of Pair (sum Tl Tr).
of (snd Pair) (Tr (snd Pair)) :- of Pair (sum Tl Tr).

conv (fst P) (fst P') :- conv P P'.
conv (snd P) (snd P') :- conv P P'.

% EQUALITY
% sento che non ci sono abbastanza _ ancora, ne aggiungo qualcuno di seguito: _ _ _ _ _ _ _ _ _ _ _ 
step (split _ _ _ (pair _ _ X Y) _ _ F) (F X Y).
step (split _ _ _ P _ _ F) R :-
    steps P (pair _ _ X Y),
    step (split  _ _ _ (pair _ _ X Y) _ _ F) R.

step (fst (pair _ _ X Y)) X.
step (fst P) X :- steps P (pair _ _ X _Y).
step (snd (pair _ _ X Y)) Y.
step (snd P) Y :- steps P (pair _ _ _X Y).

% conv P (pair _ _ (fst P) (snd P)). % eta sulle coppie

% -------------------------------- %
% ---- PROPOSITIONAL EQUALITY ---- %
% -------------------------------- %

% FORMATION
%type id term -> term -> term -> term.

% INTRODUCTION
% T e x El(T) ==> Id(T, x, x)
%type refl term -> term -> term.
%of (refl T X) (id T X X) :- of X T.

% ELIMINATION
%type idpeel term -> term -> term -> term -> (term -> term -> term -> term) -> (term -> term) -> term.
%of (idpeel A X Y Proof C Func) (C X Y Proof) :-
%    of Proof (id A X Y),
%    pi x\ of (Func x) (C x x (refl A x)).

% EQUALITY


% ------------------ %
% ---- NATURALS ---- %
% ------------------ %

% FORMATION
type nat term.

% INTRODUCTION
type zero term.
type succ term -> term.
of zero nat.
of (succ N) nat :- of N nat.

conv zero zero.
conv (succ N) (succ M) :- conv N M.

% ELIMINATION
type natrec term -> term -> string -> string -> (term -> term -> term).
of (natrec N ZeroElement VarName1 VarName2 RecFun) (T N) :-
    of N nat,
    of ZeroElement (T zero),
    pi x y\ (of x nat, of y (T x)) => of (RecFun x y) (T (succ x)).

% EQUALITY
step (natrec zero ZeroElement _ _ RecFun) ZeroElement.
step (natrec N ZeroElement _ _ RecFun) ZeroElement :- steps N zero.

step (natrec (succ N) ZeroElement _ _ RecFun) (RecFun N (natrec N ZeroElement _ _ RecFun)).
step (natrec M ZeroElement _ _ RecFun) R :- steps M (succ N), step (natrec (succ N) ZeroElement _ _ RecFun) R.

conv (natrec N1 ZeroElement1 _ _ RecFun1) (natrec N2 ZeroElement2 _ _ RecFun2) :-
    conv N1 N2,
    conv ZeroElement1 ZeroElement2,
    pi x y\ conv (RecFun1 x y) (RecFun2 x y). % ??? 
