%accumulate lang.

% return a lambda abstraction, prove (F x)
tactic intro (lam A F) Vars K :-
    pi x \ K [([x|Vars], (F x))].


% ---- APP TACTICS ----
% app when I don't have an immediate function
tactic app (app (prod A B) H G) Vars K :-
    K [(Vars, H), (Vars, G)].

% app when I have a function as an hypothesis
tactic (app N) (app (prod A B) H G) Vars K :-
    nth_element N Vars H,
    K [(Vars, G)].

% app when I know everything
tactic (app N M) (app (prod A B) H G) Vars K :-
    nth_element N Vars H,
    nth_element M Vars G,
    K [].


% ---- HYPOTHESIS ----
tactic (var N) H Vars K :-
    nth_element N Vars H,
    K [].


% Error
%tactic Name H Vars K :- 
%    print "Error, either" Name "is not a tactic or something was wrong with its args",
%    print H,
%    print Vars,
%    print K.
