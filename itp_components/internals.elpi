% ------------------- %
% ---- INTERNALS ---- %
% ------------------- %

% apply tac to many goals
mode (tac_under_ctx i i o).
%tac_under_ctx A B C :- print (tac_under_ctx A B C), fail.
tac_under_ctx _ [] [].
tac_under_ctx Tac ((goal X T Y D as Goal) :: Goals) NG :-
    tac_under_ctx_base Tac Goal D [] NG',
    tac_under_ctx Tac Goals NGS,
    append NG' NGS NG.

% apply tac to one goal
mode (tac_under_ctx_base i i i i o).
%tac_under_ctx_base A B C D E :- print (tac_under_ctx_base A B C D E), fail.
tac_under_ctx_base Tac (goal X T Y D) (vdecl N _ :: VDecls) FVars NG :-
    pi x\ tac_under_ctx_base Tac (goal (X x) T (Y x) D) VDecls ((x, N) :: FVars) NG.

tac_under_ctx_base Tac (goal X T Y D as G) [] FVars NewGoals :-
    tactic Tac G FVars NewGoals.

mode (build_newgoals i i o).
%build_newgoals A B C :- print (build_newgoals A B C), fail.

build_newgoals (uvar K L as Y) VDecls NewGoals :-
    lookdown Y X T,
    NewGoals = [goal X T K VDecls].
build_newgoals (lam N T F) VDecls NewGoals :-
    append VDecls [vdecl N T] L,
    pi x\ build_newgoals (F x) L NewGoals.
build_newgoals (app M N) VDecls NewGoals :-
    build_newgoals M VDecls NewGoals',
    build_newgoals N VDecls NewGoals'',
    append NewGoals' NewGoals'' NewGoals.
build_newgoals (pair M N) VDecls NewGoals :-
    build_newgoals M VDecls NewGoals',
    build_newgoals N VDecls NewGoals'',
    append NewGoals' NewGoals'' NewGoals.
build_newgoals FVar _ [] :- name FVar.

mode (get_goals i i o o).
%get_goals A B C D :- print (get_goals A B C D), fail.
get_goals [] Rest [] Rest.
get_goals (N :: GoalsToPick) Goals OutGoals Rest :-
    get_nth N Left Goals Right Goal,
    append Left Right Rest',
    dec_greater N GoalsToPick GoalsToPickFixed,
    get_goals GoalsToPickFixed Rest' OutGoals' Rest,
    append [Goal] OutGoals' OutGoals.

mode (get_nth i o i o o).
%get_nth A B C D E :- print (get_nth A B C D E), fail.
get_nth 1 [] [X|XS] XS X.
get_nth N L [X|XS] R Res :-
    M is N - 1,
    get_nth M L' XS R Res,
    append [X] L' L.     

dec_greater _ [] [].
dec_greater N (M :: MS) (M' :: MS') :-
    (M > N, M' is M - 1; M' = M),
    dec_greater N MS MS'.

mode (lookdown i i i).
lookdown (uvar _ _ as X) Y T :- declare_constraint (read-refined X Y T) [X].

constraint isa read-evar read-refined of {
     rule (E1 : Ctx ?- isa (uvar K L1) Ty (uvar O L1' as Y))
        \ (E2 : read-refined (uvar O L2) X T)
        | (/* print "match" L1 L1' L2, */ L1 = L1', !; print "align fail on" L1 "=" L1', halt)
        <=> (E2 : X = uvar K [], T = Ty).
}
