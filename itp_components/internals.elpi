% -------------- %
% ---- LOOP ---- %
% -------------- %

% itp_loops args:
% - input term (for reachability checks)
% - state (current open goals, inactive list, levels, max goal number)
% - input tactics list
% - remaining goals
% - output script list
mode (itp_loop i i i o o).
%itp_loop A B C :- print (itp_loop A B C), fail.

/*
Termination:
- empty state i.e.
    - no active goals
    - no inactive goals
    - no branching, no focus
- input script can be non empty (?)
*/
itp_loop _ State _ [] [] :- empty_state State.

% Loop without script as input
itp_loop Term State [] OutGoals OutScript :-
    print_status State,
    prompt_user "input tactic" Tac,
    (Tac = undo, !, fail;
    Tac = quit, get_outgoals Term State OutGoals, !;
    process_tac Tac State NewState,
    append [Tac] OutScript' OutScript,
    itp_loop Term NewState [] OutGoals OutScript';
    print "error with" Tac,
    itp_loop Term State [] OutGoals OutScript).

% Loop with script as input (could be from parens tinycal)
itp_loop Term State [Tac|Tacs] OutGoals OutScript :-
    process_tac Tac State NewState,
    append [Tac] OutScript' OutScript,
    itp_loop Term NewState Tacs OutGoals OutScript'.


empty_state (state [] [] [] _).
% OG is a list of tuples [(int, goal), (int, goal), ...]
get_outgoals Term (state OG _ _ _) OG' :-
    unlabel_goals OG UOG, remove_unreachable_goals Term UOG OG'.

mode (remove_unreachable_goals i i o).
remove_unreachable_goals _ [] [].
remove_unreachable_goals Term [Goal|Goals] [Goal|RGoals] :-
    reachable_goal Term Goal, remove_unreachable_goals Term Goals RGoals.
remove_unreachable_goals Term [_|Goals] RGoals :-
    remove_unreachable_goals Term Goals RGoals.

% meta_in_term must be defined by each language
reachable_goal Term (goal X _ _ _) :-
    meta_in_term X Term.


% ------------------- %
% ---- INTERNALS ---- %
% ------------------- %

% ITP carries around a state which is representeted by a tuple of tre elements:
%   1. list of active goals,
%   2. list of inactive goals (which is a list of lists, because of nesting)
%   3. list of nesting levels L ::= [b|L] | [f|L] | []
% branch and focus put b and f on top of Levels then:
%   - select some goals
%   - add the remaining goals as an inactive list
% when they close:
%   - remove b/f from Levels
%   - restore the current list on top of the inactive list

mode (process_tac i i o).
process_tac A B C :- print (process_tac A B C), fail.

% ---- BRANCHING ---- %

% Invariant: goals are relabeled when put in the branch context, but goals in
%            the Active list always keep their old label

% skip_goal blocks the user until he/she acknowledges with skip
process_tac skip (state [(0, skip_goal)] _I ([b|_] as L) _M) (state [] _I L _M).

process_tac T (state [(0, skip_goal)] _ _ _) _ :-
    print "you have to skip", fail.

/*
- branch is always called on a state that has at least one goal, otherwise fail
- branch lables branch context goals but they are only needed for projection, so
  we can keep numbering goals from max goal number
*/
process_tac branch
    (state ([Goal|_] as Goals) I L M)
    (state [Goal] [bstate BranchCtx [] []|I] [b|L] M) :-
    label_branch_ctx Goals BranchCtx.

/*
- shift assumes that there is always a goal to shift to (i.e. at least two goals
  on top of the branch context, otherwise fail
*/

% shift ON a closed goal FROM an NON elaborated branch
process_tac shift
    (state [Hd] [bstate [(_, Hd), (_, (_, closed_goal)) as ClosedGoal|Gs] BO BOTop|I] ([b|_] as L) M)
    (state [(0, skip_goal)] [bstate [ClosedGoal|Gs] BO NewBOTop|I] ([b|_] as L) M) :-
    append BOTop Hd NewBOTop.

% shift ON a closed goal FROM an elaborated branch
process_tac shift
    (state Active [bstate [_, (_, (_, closed_goal)) as ClosedGoal|Gs] BranchOut BOT|I] ([b|_] as L) M)
    (state [(0, skip_goal)] [bstate [ClosedGoal|Gs] NewOut BOT|I] ([b|_] as L) M) :-
    append BranchOut Active NewOut.

% shift ON a NON closed goal FROM a NON elaborated goal
process_tac shift
    (state [Hd] [bstate [(_, Hd), (_, NewHd) as Goal|Gs] BO BOTop|I] ([b|_] as L) M)
    (state [NewHd] [bstate [Goal|Gs] BO NewBOTop|I] L M) :-
    append BOTop Hd NewBOTop.

% shift ON a NON closed goal FROM an elaborated goal
process_tac shift
    (state Active [bstate [_, (_, NewHd) as Goal|R] BranchOut BOT|I] ([b|_] as L) M)
    (state [NewHd] [bstate [Goal|R] NewOut BOT|I] L M) :-
    append BranchOut Active NewOut.

process_tac unbranch
    (state Active [bstate _ BranchOut BranchOutTop|I] [b|L] M)
    (state NewActive I L M) :-
    append BranchOut Active NewOut,
    append BranchOutTop NewOut NewActive.

% can apply project only right after branch open or shift i.e. when the head of
% the branch context is also the only active goal
process_tac (project) _ _ :-
    print "error: project with no args", fail.
process_tac (project []) _ _ :-
    print "error: project with no indexes", fail.

macro @empty_goal :- (0, (0, empty_goal)).
% Invariant: project doesn't unlabel goals i.e. they are still labled as they
%            appear in the branch context
process_tac (project [Idx|Idxs])
    (state [Hd] [bstate ([(_, Hd)|Ctx] as Goals) BO C|I] ([b|_] as L) M)
    (state Selected [bstate [@empty_goal|Rest] BO C|I] L M) :-
    get_numbered_goals [Idx|Idxs] Goals LS Rest,
    unlabel_goals LS Selected.

process_tac (project Selector)
    (state [Hd] [bstate ([(Idx, Hd)|Ctx] as Goals) BO C|I] ([b|_] as L) M)
    (state Selected [bstate [@empty_goal|Rest] BO C|I] L M) :-
    get_goals_from_selector Selector Goals LS Rest,
    unlabel_goals LS Selected.

% after a project all we don't care about the branch context becuase no more
% shifts or projections can be done, only unbranch.
process_tac (project all)
    (state [Hd] [bstate ([(_, Hd)|Ctx] as AllCtx) BO C|I] ([b|_] as L) M)
    (state AllGoals [bstate [@empty_goal] BO C|I] L M) :-
    unlabel_goals AllCtx AllGoals.

% error reporting
process_tac shift
    (state A [bstate [_] _ _|_] _ _) _ :-
    print "error: shift cannot be performed on a single goal context", fail.
process_tac shift (state _ _ [] _) _ :-
    print "error: can't shift outside of a branch", fail.
process_tac shift (state _ _ [f|_] _) _ :-
    print "error: can't shift inside a focus", fail.

process_tac skip (state _ _ [b|_] _) _ :-
    print "error: nothing to skip", fail.
process_tac skip (state _ _ [f|_] _) _ :-
    print "error: can't skip inside a focus", fail.
process_tac skip (state _ _ [] _) _ :-
    print "error: can't skip outside of a branch", fail.

process_tac unbranch (state _ _ [] _) _ :-
    print "error: no branch to close", fail.
process_tac unbranch (state _ _ [f|_] _) _ :-
    print "error: focus must be closed with unfocus", fail.

% in a branch but not in a projectable form
process_tac (project _) (state _ _ [b|_] _) _ :-
    print "error: can't project in a developed branch", fail.
process_tac (project _) (state _ _ [] _) _ :-
    print "error: can't project outside of a branch", fail.
process_tac (project _) (state _ _ [f|_] _) _ :-
    print "error: can't project in a focus", fail.


% ---- FOCUS ---- %

process_tac (focus []) _ _ :- print "error: no indexes for focus", fail.
process_tac (focus GoalIds) (state Active Inactive L M) (state NewActive [Rest|NewInactive] [f|L] M) :-
    search_focused GoalIds Active FActive RemainingIds Rest,
    search_focused_levels RemainingIds Inactive L FInactive RIds NewInactive,
    append FActive FInactive UnorderedNew,
    order_list_by UnorderedNew GoalIds NewActive,
    (RIds = [], !; print "error: focus on non existent goals" RIds).
process_tac unfocus (state [] [I|Inactive] [f|Levels] M) (state I Inactive Levels M).

mode (order_list_by i i o).
%order_list_by A B C :- print (order_list_by A B C), fail.
order_list_by [] [] [].
order_list_by NonEmpty [] _ :-
    print "error: order_list_by, index list bigger than the actual elements",
    fail.
order_list_by UnorderedList [Id|Ids] OrderedList :-
    get_numbered_goal Id UnorderedList Goal Rest,
    append [Goal] OL' OrderedList,
    order_list_by Rest Ids OL'.

% error reporting
process_tac unfocus (state _ _ [] _) _ :-
    print "error: no focus to close", fail.
process_tac unfocus (state _ - [b|_] _) _ :-
    print "error: branch must be closed with unbranch", fail.
process_tac unfocus (state _ _ _ _) _ :-
    print "error: you can not unfocus until all goals are closed", fail.
    

% ---- PAREN ---- %

process_tac (paren []) State State.
process_tac (paren [T|Ts]) State State' :-
    process_tac T State State'',
    process_tac (paren Ts) State'' State'.


% ---- TACTICAL AS TINYCALS ---- %

process_tac idtac State State.                                                        
process_tac (fail Msg) _ _ :- print Msg, fail.                                      
                                                                                 
process_tac (orelse T1 _T2) State State' :- process_tac T1 State State'.
process_tac (orelse _T1 T2) State State' :- process_tac T2 State State'.

process_tac (orelse! T1 _T2) State State' :- tactic T1 State State', !.
process_tac (orelse! _T1 T2) State State' :- tactic T2 State State'.

process_tac (try T) State State' :-
    process_tac (orelse T idtac) State State'.
process_tac (solve T) State State' :-
    process_tac T State State', empty_state State'.
process_tac (repeat T) State State' :-
    process_tac (paren [T, (try (repeat T))]) State State'.

process_tac (do 0 T) State State.
process_tac (do N T) State State' :-
    M is N - 1, process_tac (paren [T, (do M T)]) State State'.

process_tac (first []) State State.
process_tac (first [Tac|Tacs]) State State' :-
    process_tac (orelse Tac (first Tacs)) State State'.


% ---- DEFAULT ---- %

/*
% Alternativa a quello scritto sotto i.e. si entra nelle htac.
% Cosa cambia? Htac non puo' contenere tinycal, diventa una tattica che opera
% sui goal in un qualche modo senza il supporto dei tinycal
process_tac Tac (state Goals I L Mgn) (state Newgoals I L NMgn) :-
    htac Tac Goals UnlabeledGoals,
    label_goals Mgn UnlabeledGoals NMgn NewGoals.

% Default di htac e' bind
htac Tac [Goal|Goals] NewGoals :-
    exec_tac Tac Goal NewGoals',
    append NewGoals' NewGoals'' NewGoals,
    htac Tac Goals NewGoals''.
    
*/

% Invariant: here Tac is either an htac or an ltac, but it can't contain
%            tinycals or tacticals
process_tac Tac (state [] _ _ _) _ :- !, fail.
% After process_tac Tac in a branch NewGoals will contain all new local goals
% and also new goals from branches closed by side effect. Those branches will be
% replaced with a closed_goal
process_tac Tac
    (state Goals [bstate BCtx BO BOT|I] ([b|_] as L) Mgn)
    (state NewGoals [bstate NewBCtx BO BOT|I] L NMgn) :-
    unlabel_goals Goals UGoals,
    bind_ltac Tac UGoals NewUnlabeledGoals,
    label_goals Mgn NewUnlabeledGoals NMgn NewLabeledGoals,
    get_side_effect_goals BCtx NewBCtx SideEffectGoals,
    append NewLabeledGoals SideEffectGoals NewGoals.
process_tac Tac (state Goals I L Mgn) (state NewGoals I L NMgn) :-
    unlabel_goals Goals UGoals,
    bind_ltac Tac UGoals NewUnlabeledGoals,
    label_goals Mgn NewUnlabeledGoals NMgn NewGoals.

mode (bind_ltac i i o).
%bind_ltac A B C :- print (bind_ltac A B C), fail.
bind_ltac _ [] [].
bind_ltac Tac [Goal|Goals] NewGoals :-
    exec_tac Tac Goal NewGoals',
    append NewGoals' NewGoals'' NewGoals,
    bind_ltac Tac Goals NewGoals''.

mode (get_side_effect_goals i o o).
get_side_effect_goals A B C :- print (get_side_effect_goals A B C), fail.
get_side_effect_goals [] [] [].
get_side_effect_goals [(M, (N, goal _ _ Y V as Goal))|Goals] [(M, (N, closed_goal))|NewBCtx] SideEffectGoals :-
    closed_goal Goal, intro_and_build Y V SEG',
    append SEG' SEG'' SideEffectGoals,
    get_side_effect_goals Goals NewBCtx SEG''.
get_side_effect_goals [Goal|Goals] [Goal|NewBCtx] SideEffectGoals :-
    get_side_effect_goals Goals NewBCtx SideEffectGoals.
    

/*
%   Execute tactic under context of a goal
*/
mode (exec_tac i i o).
exec_tac Tac (goal X T Y V as Goal) NewGoals :-
    exec_tac_aux Tac Goal V [] NewGoals.

mode (exec_tac_aux i i i i o).
%exec_tac_aux A B C D E :- print (exec_tac_aux A B C D E), fail.
exec_tac_aux Tac (goal X T Y D as G) [] FVars NG :-
    tactic Tac G FVars Term, X = Term, build_newgoals Y D NG.
exec_tac_aux Tac (goal X T Y D) [vdecl N TN|VDecls] FVars NG :-
    pi x\ copy_var x N => (
        copy_to_type TN TN',
        %of x TN' x =>
        locDecl x TN' =>
            exec_tac_aux Tac (goal (X x) T (Y x) D) VDecls [(x, N)|FVars] NG
    ).


% ------------------------ %
% ---- BRANCH HELPERS ---- %
% ------------------------ %

mode (label_branch_ctx i o).
label_branch_ctx Goals LGoals :-
    label_goals 0 Goals _ LGoals.

list_is_ordered [].
list_is_ordered [_].
list_is_ordered [N, N'|Ns] :-
    N < N', list_is_ordered [N'|Ns].

mode (closed_goal i).
closed_goal (_, goal (uvar as X) _ _ _) :- !, fail.
closed_goal (goal (uvar as X) _ _ _) :- !, fail.
closed_goal G.

mode (intro_and_build i i o).
intro_and_build Y V NewGoals :-
    intro_and_build_aux Y V V [] NewGoals.

mode (intro_and_build_aux i i i i o).
intro_and_build_aux Y V [] FVars NG :-
    build_newgoals Y V NG.
intro_and_build_aux Y V [vdecl N TN|VDecls] FVars NG :-
    pi x\ copy_var x N => (
        copy_to_type TN TN',
        %of x TN' x =>
        locDecl x TN' =>
            intro_and_build_aux (Y x) V VDecls [(x, N)|FVars] NG
    ).


% ------------------------- %
% ---- TACTICS HELPERS ---- %
% ------------------------- %

mode (get_goals_from_selector i i o o).
get_goals_from_selector _ [] [] [].
get_goals_from_selector Sel [(N, _) as Goal|Gs] Selected Rest :- 
    Sel N, append [Goal] Selected' Selected,
    get_goals_from_selector Sel Gs Selected' Rest.
get_goals_from_selector Sel [(N, _) as Goal|Gs] Selected Rest :-
    not (Sel N), append [Goal] Rest' Rest,
    get_goals_from_selector Sel Gs Selected Rest'.

% Available selectors
even 0.
even 1 :- !, fail.
even N :- M is N - 1, odd M.
odd 0 :- !, fail.
odd 1.
odd N :- M is N - 1, even M.

mode (get_numbered_goal i i o o).
%get_numbered_goal A B C D :- print (get_numbered_goal A B C D), fail.
get_numbered_goal _ [] none []. % N is not in list
get_numbered_goal N [(N, _) as Goal|Goals] Goal Goals.
get_numbered_goal N [(M, _) as Goal|Goals] Selected Rest :-
    not (N is M), append [Goal] Rest' Rest, 
    get_numbered_goal N Goals Selected Rest'.

% Search for goals in an unordered manner
mode (get_numbered_goals i i o o).
get_numbered_goals [] NGoals [] NGoals.
get_numbered_goals [N|Ns] NGoals [S|Selected] Rest :-
    get_numbered_goal N NGoals S NGoals',
    (S = none, print S "not in list", !, fail;
    get_numbered_goals Ns NGoals' Selected Rest).

mode (label_goals i i o o).
label_goals Mgn [] Mgn [].
label_goals Mgn [Goal|Goals] NMgn [(Mgn', Goal)|LGoals] :-
    Mgn' is Mgn + 1,
    label_goals Mgn' Goals NMgn LGoals.

mode (unlabel_goals i o).
unlabel_goals [] [].
unlabel_goals [(_, G)|Gs] [G|UGs] :- unlabel_goals Gs UGs.


% ---- FOCUS HELPERS ---- %

mode (add_labels i i o).
add_labels [] [] [].
add_labels [L|Ls] [Goal|Goals] [(L, Goal)|LGoals] :- add_labels Ls Goals LGoals.

% Get indexed goals given a possibly unordered list of indexes.
mode (search_focused i i o o o).
%search_focused A B C D E :- print (search_focused A B C D E), fail.
search_focused [] RemainingGoals [] [] RemainingGoals.
search_focused [Id|Ids] Goals Focused NotFound Rest :-
    get_numbered_goal Id Goals Goal Rest',
    (Goal = none, append [Id] NotFound' NotFound,          % Rest' = Goals
    search_focused Ids Goals Focused NotFound' Rest, !;
    append [Goal] Focused' Focused,
    search_focused Ids Rest' Focused' NotFound Rest).

mode (search_focused_levels i i i o o o).
% Two termination cases:
%   1. no remaining indices
%   2. some remaining indices but empty levels
%search_focused_levels A B C D E F :- print (search_focused_levels A B C D E F), fail.
search_focused_levels [] I _ [] [] I. 
search_focused_levels RemainingIds I [] [] RemainingIds I. 
% Focus goals from a branch
search_focused_levels Ids [bstate BCtx Out1 Out2|I] [b|L] Focused NotFound NewInactive :-
    unlabel_goals BCtx UBCtx,
    search_focused Ids UBCtx FocusedBCtx RemIdsBCtx _,
    search_focused RemIdsBCtx Out1 FocusedOut1 RemIds1 RestOut1,
    search_focused RemIds1 Out2 FocusedOut2 RemIds2 RestOut2,
    append FocusedOut1 FocusedOut2 Tmp,
    append FocusedBCtx Tmp AllFocused,
    append AllFocused Focused' Focused,
    append [bstate BCtx RestOut1 RestOut2] NewInactive' NewInactive,
    search_focused_levels RemIds2 I L Focused' NotFound NewInactive'.
% focus goals from another focus
search_focused_levels Ids [OldActive|I] [f|L] Focused NotFound NewInactive :-
    search_focused Ids OldActive FOldActive RemainingIds RestOldActive,
    append RestOldActive NewInactive' NewInactive,
    search_focused_levels RemainingIds I L Focused' NotFound NewInactive'.


% -------------------------------- %
% ---- BUILD NEWGOALS HELPERS ---- %
% -------------------------------- %

not_a_dup _ [].
not_a_dup N [vdecl N _|_] :- !, print "Varname" N "already used", fail.
not_a_dup N [vdecl _ _|VDecls] :- not_a_dup N VDecls. 


% ----------------------- %
% ---- META RECOVERY ---- %
% ----------------------- %

mode (lookdown i i i i).
lookdown (uvar K L as X) VDecls Y T :- declare_constraint (read-refined X VDecls Y T) [X].

constraint i _sa read-evar read-refined of {
     rule (E1 : Ctx ?- isa (uvar K L1) Ty (uvar O L1' as Y) _)
        \ (E2 : read-refined (uvar O L2) VDecls X T)
        | (%print "align-debug: " K L1 "-" O L1' "-" O L2,
          L1 = L1',
          create_copy_hyps L1' VDecls Hyps,
          Hyps => copy_from_type Ty S, !;
          print "align fail on" L1 "=" L1', halt)
        <=> (E2: (X = uvar K [], T = S)).
}

mode (create_copy_hyps i i o).
create_copy_hyps [] [] [].
create_copy_hyps [V|Vs] [vdecl W _|Ws] [copy_var V W|Hyps] :- create_copy_hyps Vs Ws Hyps.

% ------------------------- %
% ---- TACTICS HELPERS ---- %
% ------------------------- %

get_named N [(X, N)|_] X.
get_named N [_|TL] X :-
    get_named N TL X.
