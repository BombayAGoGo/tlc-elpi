% -------------------- %
% ---- I/O MODULE ---- %
% -------------------- %

print_status (state Active [bstate [] _ _|_] [b|_] _) :-
    print,
    print_actives Active,
    print "Branching context: empty".
print_status (state Active [bstate ([(N, _)|_] as Bctx) _ _|_] [b|_] _) :-
    print,
    print_actives Active,
    print "Branching context:",
    print_ctx "    " N Bctx.
print_status (state Active _ [f|_] _) :-
    print,
    print "In focus",
    print_actives Active.

print_status (state Active _ _ _) :-
    print,
    print_actives Active.

print_actives Active :-
    length Active N,
    print_n_open_goals N,
    print_goals "" Active.

print_n_open_goals N :-
    pp N SN,
    (N is 1, Q is "goal", !; Q is "goals"),
    P is "you got " ^ SN ^ " open " ^ Q,
    print P.

print_goal Prefix _ (empty_goal).
print_goal Prefix _ (skip_goal) :- P is Prefix ^ "closed branch, skip", print P.
print_goal Prefix N (goal X T Y V as Goal) :- print_goal_aux Prefix N Goal V.

print_goal_aux Prefix N (goal PTerm Type _ VDecls) [] :-
    pp Type TypePP,
    vdecls_to_string VDecls VDString,
    pp N SN,
    pp PTerm SPTerm,
    S is Prefix ^ SN ^ ") [" ^ VDString ^ "] |- " ^ SPTerm ^ ": " ^ TypePP,
    print S.

print_goal_aux Prefix N (goal PTerm Type _ VDecls) [vdecl Name _|VDecls'] :-
    pp Name SName,
    %pi x\ name_of x SName => print_goal_aux Prefix N (goal (PTerm x) Type _ VDecls) VDecls'.
    pi x\ pp x SName => print_goal_aux Prefix N (goal (PTerm x) Type _ VDecls) VDecls'.

mode (print_goals i i).
%print_goals A B :- print (print_goals A B), fail.
print_goals _ [].
print_goals Prefix [(N, Goal)|Goals] :-
    print_goal Prefix N Goal,
    print_goals Prefix Goals, !.

print_ctx _ _ [].
print_ctx Prefix N [(_, (_, empty_goal))|Ctxs] :-
    print_ctx Prefix N Ctxs.
print_ctx Prefix N [(N, (O, Goal))|Ctxs] :-
    pp N NS,
    Prefix' is Prefix ^ "> " ^ NS ^ "° - ",
    print_goal Prefix' O Goal,
    print_ctx Prefix N Ctxs.
print_ctx Prefix N [(M, (O, Goal))|Ctxs] :-
    pp M MS,
    Prefix' is Prefix ^ " " ^ MS ^ "° - ",
    print_goal Prefix' O Goal,
    print_ctx Prefix N Ctxs.

vdecls_to_string [] "".
vdecls_to_string [vdecl N T|VDecls] S :-
    vdecls_to_string VDecls S',
    pp T TPP, pp N SN,
    (S' is "", S is "(" ^ SN ^ ": " ^ TPP ^ ")", !;
    S is "(" ^ SN ^ ": " ^ TPP ^ "), " ^ S'), !.

prompt_user Msg Input :-
    print Msg, read Input, print.
