% -------------------- %
% ---- I/O MODULE ---- %
% -------------------- %

print_status (Active, (Ctx, Out) :: Inactive, b :: Levels) :-
    print_actives Active,
    print "Branching context:",
    print_ctx "    " Ctx,
    print "Branch output:",
    length Out M,
    print_goals "    " M Out.
print_status (Active, Inactive, Levels) :-
    print_actives Active.

print_actives Active :-
    length Active N,
    print_n_open_goals N,
    print_goals "" N Active.

print_n_open_goals N :-
    term_to_string N SN,
    P is "you got " ^ SN ^ " open goals",
    print P.

print_goals Prefix N Goals :- print_goal_aux 1 N Prefix Goals.
print_goal Prefix Goal :- print_goal_aux 1 1 Prefix [Goal].

print_goal_aux _ 0 _ [].
print_goal_aux Current Length Prefix (goal PTerm Type _ VDecls :: Goals) :-
    pp Type TypePP,
    vdecls_to_string VDecls VDString,
    term_to_string Current SCurrent,
    term_to_string PTerm SPTerm,
    S is Prefix ^ SCurrent ^ ") [" ^ VDString ^ "] |- " ^ SPTerm ^ ": " ^ TypePP,
    print S,
    Length' is Length - 1,
    Current' is Current + 1,
    print_goal_aux Current' Length' Prefix Goals, !.

print_ctx _ [].
print_ctx Prefix ((_N, Ctx) :: Ctxs) :-
    print_goal Prefix Ctx,
    print_ctx Prefix Ctxs.

vdecls_to_string [] "".
vdecls_to_string (vdecl N T :: VDecls) S :-
    vdecls_to_string VDecls S',
    pp T TPP,
    term_to_string N SN,
    (S' is "", S is "(" ^ SN ^ ": " ^ TPP ^ ")", !;
    S is "(" ^ SN ^ ": " ^ TPP ^ "), " ^ S'), !.

prompt_user Msg Input :-
    print Msg, read Input, print.
