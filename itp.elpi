accumulate utils.

run_itp X InScript :- loop [([],X)] [] InScript.

% ------------------ %
% ---- ITP LOOP ---- %
% ------------------ %

% base call
loop [] OutScript InScript :-
    reverse OutScript OutReversed,
    print "Total script:" OutReversed.

% call with no script
/*
loop [(Vars,X)|TL] OutScript [] :-
    print_constraints,
    print, print Vars "|-" X,
    read T,
    tactic T TE Vars (Goals \ sigma TL' \
        lookup X Y,
        X = TE,
        print "recuperato" Y "elaborato di" TE,
        append Goals TL TL',
        loop TL' [T|OutScript] []).
*/

loop [(Vars,X)|TL] OutScript [] :-
    print_constraints,
    print, print Vars "|-" X,
    read T,
    tactic T X Vars (Goals \ sigma TL' \
        append Goals TL TL',
        loop TL' [T|OutScript] []).

% call with script
loop [(Vars,X)|TL] OutScript [T|InScript] :-
    tactic T TE Vars (Goals \ sigma TL' \
        X = TE,
        append Goals TL TL',
        loop TL' [T|OutScript] InScript).

lookup X Y :- declare_constraint (read-evar X Y) [X].
lookdown X Y :- declare_constraint (read-refined X Y) [X].

constraint isa read-evar read-refined of {
    rule (E1 : Ctx ?- isa (uvar K L1) Ty (uvar O L1'))
        \ (E2 : read-evar (uvar K L2) Y)
        | (L1 = L1')
        <=> (E2 : Y = uvar O L2).

    rule (E1 : Ctx ?- isa (uvar K L1) Ty (uvar O L1' as Y))
        \ (E2 : read-refined (uvar O L2) X)
        | (L1 = L1')
        <=> (E2 : X = uvar K L2).
}
